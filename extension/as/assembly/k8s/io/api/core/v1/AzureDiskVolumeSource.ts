// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";

export class AzureDiskVolumeSource {
  static encode(message: AzureDiskVolumeSource, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.diskName);

    writer.uint32(18);
    writer.string(message.diskURI);

    writer.uint32(26);
    writer.string(message.cachingMode);

    writer.uint32(34);
    writer.string(message.fsType);

    writer.uint32(40);
    writer.bool(message.readOnly);

    writer.uint32(50);
    writer.string(message.kind);
  }

  static decode(reader: Reader, length: i32): AzureDiskVolumeSource {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new AzureDiskVolumeSource();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.diskName = reader.string();
          break;

        case 2:
          message.diskURI = reader.string();
          break;

        case 3:
          message.cachingMode = reader.string();
          break;

        case 4:
          message.fsType = reader.string();
          break;

        case 5:
          message.readOnly = reader.bool();
          break;

        case 6:
          message.kind = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  diskName: string;
  diskURI: string;
  cachingMode: string;
  fsType: string;
  readOnly: bool;
  kind: string;

  constructor(
    diskName: string = "",
    diskURI: string = "",
    cachingMode: string = "",
    fsType: string = "",
    readOnly: bool = false,
    kind: string = ""
  ) {
    this.diskName = diskName;
    this.diskURI = diskURI;
    this.cachingMode = cachingMode;
    this.fsType = fsType;
    this.readOnly = readOnly;
    this.kind = kind;
  }
}
