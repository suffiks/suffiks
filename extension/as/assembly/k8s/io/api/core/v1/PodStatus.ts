// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { PodCondition } from "./PodCondition";
import { PodIP } from "./PodIP";
import { Time } from "../../../apimachinery/pkg/apis/meta/v1/Time";
import { ContainerStatus } from "./ContainerStatus";

export class PodStatus {
  static encode(message: PodStatus, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.phase);

    const conditions = message.conditions;
    for (let i: i32 = 0; i < conditions.length; ++i) {
      writer.uint32(18);
      writer.fork();
      PodCondition.encode(conditions[i], writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.message);

    writer.uint32(34);
    writer.string(message.reason);

    writer.uint32(90);
    writer.string(message.nominatedNodeName);

    writer.uint32(42);
    writer.string(message.hostIP);

    writer.uint32(50);
    writer.string(message.podIP);

    const podIPs = message.podIPs;
    for (let i: i32 = 0; i < podIPs.length; ++i) {
      writer.uint32(98);
      writer.fork();
      PodIP.encode(podIPs[i], writer);
      writer.ldelim();
    }

    const startTime = message.startTime;
    if (startTime !== null) {
      writer.uint32(58);
      writer.fork();
      Time.encode(startTime, writer);
      writer.ldelim();
    }

    const initContainerStatuses = message.initContainerStatuses;
    for (let i: i32 = 0; i < initContainerStatuses.length; ++i) {
      writer.uint32(82);
      writer.fork();
      ContainerStatus.encode(initContainerStatuses[i], writer);
      writer.ldelim();
    }

    const containerStatuses = message.containerStatuses;
    for (let i: i32 = 0; i < containerStatuses.length; ++i) {
      writer.uint32(66);
      writer.fork();
      ContainerStatus.encode(containerStatuses[i], writer);
      writer.ldelim();
    }

    writer.uint32(74);
    writer.string(message.qosClass);

    const ephemeralContainerStatuses = message.ephemeralContainerStatuses;
    for (let i: i32 = 0; i < ephemeralContainerStatuses.length; ++i) {
      writer.uint32(106);
      writer.fork();
      ContainerStatus.encode(ephemeralContainerStatuses[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): PodStatus {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new PodStatus();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.phase = reader.string();
          break;

        case 2:
          message.conditions.push(PodCondition.decode(reader, reader.uint32()));
          break;

        case 3:
          message.message = reader.string();
          break;

        case 4:
          message.reason = reader.string();
          break;

        case 11:
          message.nominatedNodeName = reader.string();
          break;

        case 5:
          message.hostIP = reader.string();
          break;

        case 6:
          message.podIP = reader.string();
          break;

        case 12:
          message.podIPs.push(PodIP.decode(reader, reader.uint32()));
          break;

        case 7:
          message.startTime = Time.decode(reader, reader.uint32());
          break;

        case 10:
          message.initContainerStatuses.push(
            ContainerStatus.decode(reader, reader.uint32())
          );
          break;

        case 8:
          message.containerStatuses.push(
            ContainerStatus.decode(reader, reader.uint32())
          );
          break;

        case 9:
          message.qosClass = reader.string();
          break;

        case 13:
          message.ephemeralContainerStatuses.push(
            ContainerStatus.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  phase: string;
  conditions: Array<PodCondition>;
  message: string;
  reason: string;
  nominatedNodeName: string;
  hostIP: string;
  podIP: string;
  podIPs: Array<PodIP>;
  startTime: Time | null;
  initContainerStatuses: Array<ContainerStatus>;
  containerStatuses: Array<ContainerStatus>;
  qosClass: string;
  ephemeralContainerStatuses: Array<ContainerStatus>;

  constructor(
    phase: string = "",
    conditions: Array<PodCondition> = [],
    message: string = "",
    reason: string = "",
    nominatedNodeName: string = "",
    hostIP: string = "",
    podIP: string = "",
    podIPs: Array<PodIP> = [],
    startTime: Time | null = null,
    initContainerStatuses: Array<ContainerStatus> = [],
    containerStatuses: Array<ContainerStatus> = [],
    qosClass: string = "",
    ephemeralContainerStatuses: Array<ContainerStatus> = []
  ) {
    this.phase = phase;
    this.conditions = conditions;
    this.message = message;
    this.reason = reason;
    this.nominatedNodeName = nominatedNodeName;
    this.hostIP = hostIP;
    this.podIP = podIP;
    this.podIPs = podIPs;
    this.startTime = startTime;
    this.initContainerStatuses = initContainerStatuses;
    this.containerStatuses = containerStatuses;
    this.qosClass = qosClass;
    this.ephemeralContainerStatuses = ephemeralContainerStatuses;
  }
}
