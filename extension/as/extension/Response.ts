// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { KeyValue } from "./KeyValue";
import { EnvFrom } from "./EnvFrom";
import { Container } from "../k8s/io/api/core/v1/Container";

export class Response {
  static encode(message: Response, writer: Writer): void {
    const env = message.env;
    if (env !== null) {
      writer.uint32(10);
      writer.fork();
      KeyValue.encode(env, writer);
      writer.ldelim();
    }

    const label = message.label;
    if (label !== null) {
      writer.uint32(18);
      writer.fork();
      KeyValue.encode(label, writer);
      writer.ldelim();
    }

    const annotation = message.annotation;
    if (annotation !== null) {
      writer.uint32(26);
      writer.fork();
      KeyValue.encode(annotation, writer);
      writer.ldelim();
    }

    const envFrom = message.envFrom;
    if (envFrom !== null) {
      writer.uint32(34);
      writer.fork();
      EnvFrom.encode(envFrom, writer);
      writer.ldelim();
    }

    const initContainer = message.initContainer;
    if (initContainer !== null) {
      writer.uint32(50);
      writer.fork();
      Container.encode(initContainer, writer);
      writer.ldelim();
    }

    const container = message.container;
    if (container !== null) {
      writer.uint32(58);
      writer.fork();
      Container.encode(container, writer);
      writer.ldelim();
    }

    writer.uint32(42);
    writer.bytes(message.mergePatch);
  }

  static decode(reader: Reader, length: i32): Response {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Response();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.env = KeyValue.decode(reader, reader.uint32());
          break;

        case 2:
          message.label = KeyValue.decode(reader, reader.uint32());
          break;

        case 3:
          message.annotation = KeyValue.decode(reader, reader.uint32());
          break;

        case 4:
          message.envFrom = EnvFrom.decode(reader, reader.uint32());
          break;

        case 6:
          message.initContainer = Container.decode(reader, reader.uint32());
          break;

        case 7:
          message.container = Container.decode(reader, reader.uint32());
          break;

        case 5:
          message.mergePatch = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  env: KeyValue | null;
  label: KeyValue | null;
  annotation: KeyValue | null;
  envFrom: EnvFrom | null;
  initContainer: Container | null;
  container: Container | null;
  mergePatch: Uint8Array;

  constructor(
    env: KeyValue | null = null,
    label: KeyValue | null = null,
    annotation: KeyValue | null = null,
    envFrom: EnvFrom | null = null,
    initContainer: Container | null = null,
    container: Container | null = null,
    mergePatch: Uint8Array = new Uint8Array(0)
  ) {
    this.env = env;
    this.label = label;
    this.annotation = annotation;
    this.envFrom = envFrom;
    this.initContainer = initContainer;
    this.container = container;
    this.mergePatch = mergePatch;
  }
}
