// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { Verbs } from "./Verbs";

export class APIResource {
  static encode(message: APIResource, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.name);

    writer.uint32(50);
    writer.string(message.singularName);

    writer.uint32(16);
    writer.bool(message.namespaced);

    writer.uint32(66);
    writer.string(message.group);

    writer.uint32(74);
    writer.string(message.version);

    writer.uint32(26);
    writer.string(message.kind);

    const verbs = message.verbs;
    if (verbs !== null) {
      writer.uint32(34);
      writer.fork();
      Verbs.encode(verbs, writer);
      writer.ldelim();
    }

    const shortNames = message.shortNames;
    if (shortNames.length !== 0) {
      for (let i: i32 = 0; i < shortNames.length; ++i) {
        writer.uint32(42);
        writer.string(shortNames[i]);
      }
    }

    const categories = message.categories;
    if (categories.length !== 0) {
      for (let i: i32 = 0; i < categories.length; ++i) {
        writer.uint32(58);
        writer.string(categories[i]);
      }
    }

    writer.uint32(82);
    writer.string(message.storageVersionHash);
  }

  static decode(reader: Reader, length: i32): APIResource {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new APIResource();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;

        case 6:
          message.singularName = reader.string();
          break;

        case 2:
          message.namespaced = reader.bool();
          break;

        case 8:
          message.group = reader.string();
          break;

        case 9:
          message.version = reader.string();
          break;

        case 3:
          message.kind = reader.string();
          break;

        case 4:
          message.verbs = Verbs.decode(reader, reader.uint32());
          break;

        case 5:
          message.shortNames.push(reader.string());
          break;

        case 7:
          message.categories.push(reader.string());
          break;

        case 10:
          message.storageVersionHash = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  name: string;
  singularName: string;
  namespaced: bool;
  group: string;
  version: string;
  kind: string;
  verbs: Verbs | null;
  shortNames: Array<string>;
  categories: Array<string>;
  storageVersionHash: string;

  constructor(
    name: string = "",
    singularName: string = "",
    namespaced: bool = false,
    group: string = "",
    version: string = "",
    kind: string = "",
    verbs: Verbs | null = null,
    shortNames: Array<string> = [],
    categories: Array<string> = [],
    storageVersionHash: string = ""
  ) {
    this.name = name;
    this.singularName = singularName;
    this.namespaced = namespaced;
    this.group = group;
    this.version = version;
    this.kind = kind;
    this.verbs = verbs;
    this.shortNames = shortNames;
    this.categories = categories;
    this.storageVersionHash = storageVersionHash;
  }
}
