// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { LabelSelector } from "../../../apimachinery/pkg/apis/meta/v1/LabelSelector";
import { ResourceRequirements } from "./ResourceRequirements";
import { TypedLocalObjectReference } from "./TypedLocalObjectReference";

export class PersistentVolumeClaimSpec {
  static encode(message: PersistentVolumeClaimSpec, writer: Writer): void {
    const accessModes = message.accessModes;
    if (accessModes.length !== 0) {
      for (let i: i32 = 0; i < accessModes.length; ++i) {
        writer.uint32(10);
        writer.string(accessModes[i]);
      }
    }

    const selector = message.selector;
    if (selector !== null) {
      writer.uint32(34);
      writer.fork();
      LabelSelector.encode(selector, writer);
      writer.ldelim();
    }

    const resources = message.resources;
    if (resources !== null) {
      writer.uint32(18);
      writer.fork();
      ResourceRequirements.encode(resources, writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.volumeName);

    writer.uint32(42);
    writer.string(message.storageClassName);

    writer.uint32(50);
    writer.string(message.volumeMode);

    const dataSource = message.dataSource;
    if (dataSource !== null) {
      writer.uint32(58);
      writer.fork();
      TypedLocalObjectReference.encode(dataSource, writer);
      writer.ldelim();
    }

    const dataSourceRef = message.dataSourceRef;
    if (dataSourceRef !== null) {
      writer.uint32(66);
      writer.fork();
      TypedLocalObjectReference.encode(dataSourceRef, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): PersistentVolumeClaimSpec {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new PersistentVolumeClaimSpec();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.accessModes.push(reader.string());
          break;

        case 4:
          message.selector = LabelSelector.decode(reader, reader.uint32());
          break;

        case 2:
          message.resources = ResourceRequirements.decode(
            reader,
            reader.uint32()
          );
          break;

        case 3:
          message.volumeName = reader.string();
          break;

        case 5:
          message.storageClassName = reader.string();
          break;

        case 6:
          message.volumeMode = reader.string();
          break;

        case 7:
          message.dataSource = TypedLocalObjectReference.decode(
            reader,
            reader.uint32()
          );
          break;

        case 8:
          message.dataSourceRef = TypedLocalObjectReference.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  accessModes: Array<string>;
  selector: LabelSelector | null;
  resources: ResourceRequirements | null;
  volumeName: string;
  storageClassName: string;
  volumeMode: string;
  dataSource: TypedLocalObjectReference | null;
  dataSourceRef: TypedLocalObjectReference | null;

  constructor(
    accessModes: Array<string> = [],
    selector: LabelSelector | null = null,
    resources: ResourceRequirements | null = null,
    volumeName: string = "",
    storageClassName: string = "",
    volumeMode: string = "",
    dataSource: TypedLocalObjectReference | null = null,
    dataSourceRef: TypedLocalObjectReference | null = null
  ) {
    this.accessModes = accessModes;
    this.selector = selector;
    this.resources = resources;
    this.volumeName = volumeName;
    this.storageClassName = storageClassName;
    this.volumeMode = volumeMode;
    this.dataSource = dataSource;
    this.dataSourceRef = dataSourceRef;
  }
}
