// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { LoadBalancerIngress } from "./LoadBalancerIngress";

export class LoadBalancerStatus {
  static encode(message: LoadBalancerStatus, writer: Writer): void {
    const ingress = message.ingress;
    for (let i: i32 = 0; i < ingress.length; ++i) {
      writer.uint32(10);
      writer.fork();
      LoadBalancerIngress.encode(ingress[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): LoadBalancerStatus {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new LoadBalancerStatus();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.ingress.push(
            LoadBalancerIngress.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  ingress: Array<LoadBalancerIngress>;

  constructor(ingress: Array<LoadBalancerIngress> = []) {
    this.ingress = ingress;
  }
}
