// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { Quantity } from "../../../apimachinery/pkg/api/resource/Quantity";
import { PersistentVolumeClaimCondition } from "./PersistentVolumeClaimCondition";

export class PersistentVolumeClaimStatus {
  static encode(message: PersistentVolumeClaimStatus, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.phase);

    const accessModes = message.accessModes;
    if (accessModes.length !== 0) {
      for (let i: i32 = 0; i < accessModes.length; ++i) {
        writer.uint32(18);
        writer.string(accessModes[i]);
      }
    }

    const capacity = message.capacity;
    if (capacity !== null) {
      const capacityKeys = capacity.keys();
      for (let i: i32 = 0; i < capacityKeys.length; ++i) {
        const capacityKey = capacityKeys[i];
        writer.uint32(26);
        writer.fork();
        writer.uint32(10);
        writer.string(capacityKey);
        writer.uint32(18);
        writer.fork();
        Quantity.encode(capacity.get(capacityKey), writer);
        writer.ldelim();
        writer.ldelim();
      }
    }

    const conditions = message.conditions;
    for (let i: i32 = 0; i < conditions.length; ++i) {
      writer.uint32(34);
      writer.fork();
      PersistentVolumeClaimCondition.encode(conditions[i], writer);
      writer.ldelim();
    }

    const allocatedResources = message.allocatedResources;
    if (allocatedResources !== null) {
      const allocatedResourcesKeys = allocatedResources.keys();
      for (let i: i32 = 0; i < allocatedResourcesKeys.length; ++i) {
        const allocatedResourcesKey = allocatedResourcesKeys[i];
        writer.uint32(42);
        writer.fork();
        writer.uint32(10);
        writer.string(allocatedResourcesKey);
        writer.uint32(18);
        writer.fork();
        Quantity.encode(allocatedResources.get(allocatedResourcesKey), writer);
        writer.ldelim();
        writer.ldelim();
      }
    }

    writer.uint32(50);
    writer.string(message.resizeStatus);
  }

  static decode(reader: Reader, length: i32): PersistentVolumeClaimStatus {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new PersistentVolumeClaimStatus();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.phase = reader.string();
          break;

        case 2:
          message.accessModes.push(reader.string());
          break;

        case 3:
          let capacityKey: string = "";
          let capacityValue: Quantity | null = null;
          let capacityHasKey: bool = false;
          let capacityHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                capacityKey = reader.string();
                capacityHasKey = true;
                break;

              case 2:
                capacityValue = Quantity.decode(reader, reader.uint32());
                capacityHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.capacity === null) {
              message.capacity = new Map<string, Quantity>();
            }
            const capacity = message.capacity;
            if (
              capacity !== null &&
              capacityHasKey &&
              capacityHasValue &&
              capacityValue !== null
            ) {
              capacity.set(capacityKey, capacityValue);
            }
          }
          break;

        case 4:
          message.conditions.push(
            PersistentVolumeClaimCondition.decode(reader, reader.uint32())
          );
          break;

        case 5:
          let allocatedResourcesKey: string = "";
          let allocatedResourcesValue: Quantity | null = null;
          let allocatedResourcesHasKey: bool = false;
          let allocatedResourcesHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                allocatedResourcesKey = reader.string();
                allocatedResourcesHasKey = true;
                break;

              case 2:
                allocatedResourcesValue = Quantity.decode(
                  reader,
                  reader.uint32()
                );
                allocatedResourcesHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.allocatedResources === null) {
              message.allocatedResources = new Map<string, Quantity>();
            }
            const allocatedResources = message.allocatedResources;
            if (
              allocatedResources !== null &&
              allocatedResourcesHasKey &&
              allocatedResourcesHasValue &&
              allocatedResourcesValue !== null
            ) {
              allocatedResources.set(
                allocatedResourcesKey,
                allocatedResourcesValue
              );
            }
          }
          break;

        case 6:
          message.resizeStatus = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  phase: string;
  accessModes: Array<string>;
  capacity: Map<string, Quantity>;
  conditions: Array<PersistentVolumeClaimCondition>;
  allocatedResources: Map<string, Quantity>;
  resizeStatus: string;

  constructor(
    phase: string = "",
    accessModes: Array<string> = [],
    capacity: Map<string, Quantity> = new Map(),
    conditions: Array<PersistentVolumeClaimCondition> = [],
    allocatedResources: Map<string, Quantity> = new Map(),
    resizeStatus: string = ""
  ) {
    this.phase = phase;
    this.accessModes = accessModes;
    this.capacity = capacity;
    this.conditions = conditions;
    this.allocatedResources = allocatedResources;
    this.resizeStatus = resizeStatus;
  }
}
