// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: extension.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Extension_Sync_FullMethodName          = "/extension.Extension/Sync"
	Extension_Delete_FullMethodName        = "/extension.Extension/Delete"
	Extension_Default_FullMethodName       = "/extension.Extension/Default"
	Extension_Validate_FullMethodName      = "/extension.Extension/Validate"
	Extension_Documentation_FullMethodName = "/extension.Extension/Documentation"
)

// ExtensionClient is the client API for Extension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtensionClient interface {
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Extension_SyncClient, error)
	Delete(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Default(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	Validate(ctx context.Context, in *ValidationRequest, opts ...grpc.CallOption) (*ValidationResponse, error)
	Documentation(ctx context.Context, in *DocumentationRequest, opts ...grpc.CallOption) (*DocumentationResponse, error)
}

type extensionClient struct {
	cc grpc.ClientConnInterface
}

func NewExtensionClient(cc grpc.ClientConnInterface) ExtensionClient {
	return &extensionClient{cc}
}

func (c *extensionClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Extension_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &Extension_ServiceDesc.Streams[0], Extension_Sync_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &extensionSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Extension_SyncClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type extensionSyncClient struct {
	grpc.ClientStream
}

func (x *extensionSyncClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *extensionClient) Delete(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Extension_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionClient) Default(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, Extension_Default_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionClient) Validate(ctx context.Context, in *ValidationRequest, opts ...grpc.CallOption) (*ValidationResponse, error) {
	out := new(ValidationResponse)
	err := c.cc.Invoke(ctx, Extension_Validate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionClient) Documentation(ctx context.Context, in *DocumentationRequest, opts ...grpc.CallOption) (*DocumentationResponse, error) {
	out := new(DocumentationResponse)
	err := c.cc.Invoke(ctx, Extension_Documentation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtensionServer is the server API for Extension service.
// All implementations must embed UnimplementedExtensionServer
// for forward compatibility
type ExtensionServer interface {
	Sync(*SyncRequest, Extension_SyncServer) error
	Delete(context.Context, *SyncRequest) (*DeleteResponse, error)
	Default(context.Context, *SyncRequest) (*DefaultResponse, error)
	Validate(context.Context, *ValidationRequest) (*ValidationResponse, error)
	Documentation(context.Context, *DocumentationRequest) (*DocumentationResponse, error)
	mustEmbedUnimplementedExtensionServer()
}

// UnimplementedExtensionServer must be embedded to have forward compatible implementations.
type UnimplementedExtensionServer struct {
}

func (UnimplementedExtensionServer) Sync(*SyncRequest, Extension_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedExtensionServer) Delete(context.Context, *SyncRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedExtensionServer) Default(context.Context, *SyncRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Default not implemented")
}
func (UnimplementedExtensionServer) Validate(context.Context, *ValidationRequest) (*ValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedExtensionServer) Documentation(context.Context, *DocumentationRequest) (*DocumentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Documentation not implemented")
}
func (UnimplementedExtensionServer) mustEmbedUnimplementedExtensionServer() {}

// UnsafeExtensionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtensionServer will
// result in compilation errors.
type UnsafeExtensionServer interface {
	mustEmbedUnimplementedExtensionServer()
}

func RegisterExtensionServer(s grpc.ServiceRegistrar, srv ExtensionServer) {
	s.RegisterService(&Extension_ServiceDesc, srv)
}

func _Extension_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExtensionServer).Sync(m, &extensionSyncServer{stream})
}

type Extension_SyncServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type extensionSyncServer struct {
	grpc.ServerStream
}

func (x *extensionSyncServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Extension_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Extension_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServer).Delete(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Extension_Default_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServer).Default(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Extension_Default_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServer).Default(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Extension_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Extension_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServer).Validate(ctx, req.(*ValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Extension_Documentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServer).Documentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Extension_Documentation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServer).Documentation(ctx, req.(*DocumentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Extension_ServiceDesc is the grpc.ServiceDesc for Extension service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Extension_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "extension.Extension",
	HandlerType: (*ExtensionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _Extension_Delete_Handler,
		},
		{
			MethodName: "Default",
			Handler:    _Extension_Default_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Extension_Validate_Handler,
		},
		{
			MethodName: "Documentation",
			Handler:    _Extension_Documentation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _Extension_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "extension.proto",
}
