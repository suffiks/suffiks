// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";

export class QuobyteVolumeSource {
  static encode(message: QuobyteVolumeSource, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.registry);

    writer.uint32(18);
    writer.string(message.volume);

    writer.uint32(24);
    writer.bool(message.readOnly);

    writer.uint32(34);
    writer.string(message.user);

    writer.uint32(42);
    writer.string(message.group);

    writer.uint32(50);
    writer.string(message.tenant);
  }

  static decode(reader: Reader, length: i32): QuobyteVolumeSource {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new QuobyteVolumeSource();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.registry = reader.string();
          break;

        case 2:
          message.volume = reader.string();
          break;

        case 3:
          message.readOnly = reader.bool();
          break;

        case 4:
          message.user = reader.string();
          break;

        case 5:
          message.group = reader.string();
          break;

        case 6:
          message.tenant = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  registry: string;
  volume: string;
  readOnly: bool;
  user: string;
  group: string;
  tenant: string;

  constructor(
    registry: string = "",
    volume: string = "",
    readOnly: bool = false,
    user: string = "",
    group: string = "",
    tenant: string = ""
  ) {
    this.registry = registry;
    this.volume = volume;
    this.readOnly = readOnly;
    this.user = user;
    this.group = group;
    this.tenant = tenant;
  }
}
