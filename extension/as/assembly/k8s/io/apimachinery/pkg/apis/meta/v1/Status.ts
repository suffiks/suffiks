// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { ListMeta } from "./ListMeta";
import { StatusDetails } from "./StatusDetails";

export class Status {
  static encode(message: Status, writer: Writer): void {
    const metadata = message.metadata;
    if (metadata !== null) {
      writer.uint32(10);
      writer.fork();
      ListMeta.encode(metadata, writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.string(message.status);

    writer.uint32(26);
    writer.string(message.message);

    writer.uint32(34);
    writer.string(message.reason);

    const details = message.details;
    if (details !== null) {
      writer.uint32(42);
      writer.fork();
      StatusDetails.encode(details, writer);
      writer.ldelim();
    }

    writer.uint32(48);
    writer.int32(message.code);
  }

  static decode(reader: Reader, length: i32): Status {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Status();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.metadata = ListMeta.decode(reader, reader.uint32());
          break;

        case 2:
          message.status = reader.string();
          break;

        case 3:
          message.message = reader.string();
          break;

        case 4:
          message.reason = reader.string();
          break;

        case 5:
          message.details = StatusDetails.decode(reader, reader.uint32());
          break;

        case 6:
          message.code = reader.int32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  metadata: ListMeta | null;
  status: string;
  message: string;
  reason: string;
  details: StatusDetails | null;
  code: i32;

  constructor(
    metadata: ListMeta | null = null,
    status: string = "",
    message: string = "",
    reason: string = "",
    details: StatusDetails | null = null,
    code: i32 = 0
  ) {
    this.metadata = metadata;
    this.status = status;
    this.message = message;
    this.reason = reason;
    this.details = details;
    this.code = code;
  }
}
