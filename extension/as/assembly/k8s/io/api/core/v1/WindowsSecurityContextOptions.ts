// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";

export class WindowsSecurityContextOptions {
  static encode(message: WindowsSecurityContextOptions, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.gmsaCredentialSpecName);

    writer.uint32(18);
    writer.string(message.gmsaCredentialSpec);

    writer.uint32(26);
    writer.string(message.runAsUserName);

    writer.uint32(32);
    writer.bool(message.hostProcess);
  }

  static decode(reader: Reader, length: i32): WindowsSecurityContextOptions {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new WindowsSecurityContextOptions();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.gmsaCredentialSpecName = reader.string();
          break;

        case 2:
          message.gmsaCredentialSpec = reader.string();
          break;

        case 3:
          message.runAsUserName = reader.string();
          break;

        case 4:
          message.hostProcess = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  gmsaCredentialSpecName: string;
  gmsaCredentialSpec: string;
  runAsUserName: string;
  hostProcess: bool;

  constructor(
    gmsaCredentialSpecName: string = "",
    gmsaCredentialSpec: string = "",
    runAsUserName: string = "",
    hostProcess: bool = false
  ) {
    this.gmsaCredentialSpecName = gmsaCredentialSpecName;
    this.gmsaCredentialSpec = gmsaCredentialSpec;
    this.runAsUserName = runAsUserName;
    this.hostProcess = hostProcess;
  }
}
