// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { SyncRequest } from "./SyncRequest";
import { ValidationType } from "./ValidationType";

export class ValidationRequest {
  static encode(message: ValidationRequest, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.type);

    const sync = message.sync;
    if (sync !== null) {
      writer.uint32(18);
      writer.fork();
      SyncRequest.encode(sync, writer);
      writer.ldelim();
    }

    const old = message.old;
    if (old !== null) {
      writer.uint32(26);
      writer.fork();
      SyncRequest.encode(old, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ValidationRequest {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ValidationRequest();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.type = reader.int32();
          break;

        case 2:
          message.sync = SyncRequest.decode(reader, reader.uint32());
          break;

        case 3:
          message.old = SyncRequest.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  type: ValidationType;
  sync: SyncRequest | null;
  old: SyncRequest | null;

  constructor(
    type: ValidationType = 0,
    sync: SyncRequest | null = null,
    old: SyncRequest | null = null
  ) {
    this.type = type;
    this.sync = sync;
    this.old = old;
  }
}
