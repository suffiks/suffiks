// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { Preconditions } from "./Preconditions";

export class DeleteOptions {
  static encode(message: DeleteOptions, writer: Writer): void {
    writer.uint32(8);
    writer.int64(message.gracePeriodSeconds);

    const preconditions = message.preconditions;
    if (preconditions !== null) {
      writer.uint32(18);
      writer.fork();
      Preconditions.encode(preconditions, writer);
      writer.ldelim();
    }

    writer.uint32(24);
    writer.bool(message.orphanDependents);

    writer.uint32(34);
    writer.string(message.propagationPolicy);

    const dryRun = message.dryRun;
    if (dryRun.length !== 0) {
      for (let i: i32 = 0; i < dryRun.length; ++i) {
        writer.uint32(42);
        writer.string(dryRun[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): DeleteOptions {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new DeleteOptions();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.gracePeriodSeconds = reader.int64();
          break;

        case 2:
          message.preconditions = Preconditions.decode(reader, reader.uint32());
          break;

        case 3:
          message.orphanDependents = reader.bool();
          break;

        case 4:
          message.propagationPolicy = reader.string();
          break;

        case 5:
          message.dryRun.push(reader.string());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  gracePeriodSeconds: i64;
  preconditions: Preconditions | null;
  orphanDependents: bool;
  propagationPolicy: string;
  dryRun: Array<string>;

  constructor(
    gracePeriodSeconds: i64 = 0,
    preconditions: Preconditions | null = null,
    orphanDependents: bool = false,
    propagationPolicy: string = "",
    dryRun: Array<string> = []
  ) {
    this.gracePeriodSeconds = gracePeriodSeconds;
    this.preconditions = preconditions;
    this.orphanDependents = orphanDependents;
    this.propagationPolicy = propagationPolicy;
    this.dryRun = dryRun;
  }
}
