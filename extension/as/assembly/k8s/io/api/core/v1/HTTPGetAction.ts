// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { IntOrString } from "../../../apimachinery/pkg/util/intstr/IntOrString";
import { HTTPHeader } from "./HTTPHeader";

export class HTTPGetAction {
  static encode(message: HTTPGetAction, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.path);

    const port = message.port;
    if (port !== null) {
      writer.uint32(18);
      writer.fork();
      IntOrString.encode(port, writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.host);

    writer.uint32(34);
    writer.string(message.scheme);

    const httpHeaders = message.httpHeaders;
    for (let i: i32 = 0; i < httpHeaders.length; ++i) {
      writer.uint32(42);
      writer.fork();
      HTTPHeader.encode(httpHeaders[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): HTTPGetAction {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new HTTPGetAction();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.path = reader.string();
          break;

        case 2:
          message.port = IntOrString.decode(reader, reader.uint32());
          break;

        case 3:
          message.host = reader.string();
          break;

        case 4:
          message.scheme = reader.string();
          break;

        case 5:
          message.httpHeaders.push(HTTPHeader.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  path: string;
  port: IntOrString | null;
  host: string;
  scheme: string;
  httpHeaders: Array<HTTPHeader>;

  constructor(
    path: string = "",
    port: IntOrString | null = null,
    host: string = "",
    scheme: string = "",
    httpHeaders: Array<HTTPHeader> = []
  ) {
    this.path = path;
    this.port = port;
    this.host = host;
    this.scheme = scheme;
    this.httpHeaders = httpHeaders;
  }
}
