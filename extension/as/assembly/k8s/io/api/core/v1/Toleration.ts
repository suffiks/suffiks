// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";

export class Toleration {
  static encode(message: Toleration, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.key);

    writer.uint32(18);
    writer.string(message.operator);

    writer.uint32(26);
    writer.string(message.value);

    writer.uint32(34);
    writer.string(message.effect);

    writer.uint32(40);
    writer.int64(message.tolerationSeconds);
  }

  static decode(reader: Reader, length: i32): Toleration {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Toleration();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.key = reader.string();
          break;

        case 2:
          message.operator = reader.string();
          break;

        case 3:
          message.value = reader.string();
          break;

        case 4:
          message.effect = reader.string();
          break;

        case 5:
          message.tolerationSeconds = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  key: string;
  operator: string;
  value: string;
  effect: string;
  tolerationSeconds: i64;

  constructor(
    key: string = "",
    operator: string = "",
    value: string = "",
    effect: string = "",
    tolerationSeconds: i64 = 0
  ) {
    this.key = key;
    this.operator = operator;
    this.value = value;
    this.effect = effect;
    this.tolerationSeconds = tolerationSeconds;
  }
}
