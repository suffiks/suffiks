// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";

export class FCVolumeSource {
  static encode(message: FCVolumeSource, writer: Writer): void {
    const targetWWNs = message.targetWWNs;
    if (targetWWNs.length !== 0) {
      for (let i: i32 = 0; i < targetWWNs.length; ++i) {
        writer.uint32(10);
        writer.string(targetWWNs[i]);
      }
    }

    writer.uint32(16);
    writer.int32(message.lun);

    writer.uint32(26);
    writer.string(message.fsType);

    writer.uint32(32);
    writer.bool(message.readOnly);

    const wwids = message.wwids;
    if (wwids.length !== 0) {
      for (let i: i32 = 0; i < wwids.length; ++i) {
        writer.uint32(42);
        writer.string(wwids[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): FCVolumeSource {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new FCVolumeSource();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.targetWWNs.push(reader.string());
          break;

        case 2:
          message.lun = reader.int32();
          break;

        case 3:
          message.fsType = reader.string();
          break;

        case 4:
          message.readOnly = reader.bool();
          break;

        case 5:
          message.wwids.push(reader.string());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  targetWWNs: Array<string>;
  lun: i32;
  fsType: string;
  readOnly: bool;
  wwids: Array<string>;

  constructor(
    targetWWNs: Array<string> = [],
    lun: i32 = 0,
    fsType: string = "",
    readOnly: bool = false,
    wwids: Array<string> = []
  ) {
    this.targetWWNs = targetWWNs;
    this.lun = lun;
    this.fsType = fsType;
    this.readOnly = readOnly;
    this.wwids = wwids;
  }
}
