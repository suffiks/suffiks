// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { ContainerState } from "./ContainerState";

export class ContainerStatus {
  static encode(message: ContainerStatus, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.name);

    const state = message.state;
    if (state !== null) {
      writer.uint32(18);
      writer.fork();
      ContainerState.encode(state, writer);
      writer.ldelim();
    }

    const lastState = message.lastState;
    if (lastState !== null) {
      writer.uint32(26);
      writer.fork();
      ContainerState.encode(lastState, writer);
      writer.ldelim();
    }

    writer.uint32(32);
    writer.bool(message.ready);

    writer.uint32(40);
    writer.int32(message.restartCount);

    writer.uint32(50);
    writer.string(message.image);

    writer.uint32(58);
    writer.string(message.imageID);

    writer.uint32(66);
    writer.string(message.containerID);

    writer.uint32(72);
    writer.bool(message.started);
  }

  static decode(reader: Reader, length: i32): ContainerStatus {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ContainerStatus();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;

        case 2:
          message.state = ContainerState.decode(reader, reader.uint32());
          break;

        case 3:
          message.lastState = ContainerState.decode(reader, reader.uint32());
          break;

        case 4:
          message.ready = reader.bool();
          break;

        case 5:
          message.restartCount = reader.int32();
          break;

        case 6:
          message.image = reader.string();
          break;

        case 7:
          message.imageID = reader.string();
          break;

        case 8:
          message.containerID = reader.string();
          break;

        case 9:
          message.started = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  name: string;
  state: ContainerState | null;
  lastState: ContainerState | null;
  ready: bool;
  restartCount: i32;
  image: string;
  imageID: string;
  containerID: string;
  started: bool;

  constructor(
    name: string = "",
    state: ContainerState | null = null,
    lastState: ContainerState | null = null,
    ready: bool = false,
    restartCount: i32 = 0,
    image: string = "",
    imageID: string = "",
    containerID: string = "",
    started: bool = false
  ) {
    this.name = name;
    this.state = state;
    this.lastState = lastState;
    this.ready = ready;
    this.restartCount = restartCount;
    this.image = image;
    this.imageID = imageID;
    this.containerID = containerID;
    this.started = started;
  }
}
