// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { PodSignature } from "./PodSignature";
import { Time } from "../../../apimachinery/pkg/apis/meta/v1/Time";

export class PreferAvoidPodsEntry {
  static encode(message: PreferAvoidPodsEntry, writer: Writer): void {
    const podSignature = message.podSignature;
    if (podSignature !== null) {
      writer.uint32(10);
      writer.fork();
      PodSignature.encode(podSignature, writer);
      writer.ldelim();
    }

    const evictionTime = message.evictionTime;
    if (evictionTime !== null) {
      writer.uint32(18);
      writer.fork();
      Time.encode(evictionTime, writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.reason);

    writer.uint32(34);
    writer.string(message.message);
  }

  static decode(reader: Reader, length: i32): PreferAvoidPodsEntry {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new PreferAvoidPodsEntry();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.podSignature = PodSignature.decode(reader, reader.uint32());
          break;

        case 2:
          message.evictionTime = Time.decode(reader, reader.uint32());
          break;

        case 3:
          message.reason = reader.string();
          break;

        case 4:
          message.message = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  podSignature: PodSignature | null;
  evictionTime: Time | null;
  reason: string;
  message: string;

  constructor(
    podSignature: PodSignature | null = null,
    evictionTime: Time | null = null,
    reason: string = "",
    message: string = ""
  ) {
    this.podSignature = podSignature;
    this.evictionTime = evictionTime;
    this.reason = reason;
    this.message = message;
  }
}
