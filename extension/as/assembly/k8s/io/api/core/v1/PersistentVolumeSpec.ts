// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { Quantity } from "../../../apimachinery/pkg/api/resource/Quantity";
import { PersistentVolumeSource } from "./PersistentVolumeSource";
import { ObjectReference } from "./ObjectReference";
import { VolumeNodeAffinity } from "./VolumeNodeAffinity";

export class PersistentVolumeSpec {
  static encode(message: PersistentVolumeSpec, writer: Writer): void {
    const capacity = message.capacity;
    if (capacity !== null) {
      const capacityKeys = capacity.keys();
      for (let i: i32 = 0; i < capacityKeys.length; ++i) {
        const capacityKey = capacityKeys[i];
        writer.uint32(10);
        writer.fork();
        writer.uint32(10);
        writer.string(capacityKey);
        writer.uint32(18);
        writer.fork();
        Quantity.encode(capacity.get(capacityKey), writer);
        writer.ldelim();
        writer.ldelim();
      }
    }

    const persistentVolumeSource = message.persistentVolumeSource;
    if (persistentVolumeSource !== null) {
      writer.uint32(18);
      writer.fork();
      PersistentVolumeSource.encode(persistentVolumeSource, writer);
      writer.ldelim();
    }

    const accessModes = message.accessModes;
    if (accessModes.length !== 0) {
      for (let i: i32 = 0; i < accessModes.length; ++i) {
        writer.uint32(26);
        writer.string(accessModes[i]);
      }
    }

    const claimRef = message.claimRef;
    if (claimRef !== null) {
      writer.uint32(34);
      writer.fork();
      ObjectReference.encode(claimRef, writer);
      writer.ldelim();
    }

    writer.uint32(42);
    writer.string(message.persistentVolumeReclaimPolicy);

    writer.uint32(50);
    writer.string(message.storageClassName);

    const mountOptions = message.mountOptions;
    if (mountOptions.length !== 0) {
      for (let i: i32 = 0; i < mountOptions.length; ++i) {
        writer.uint32(58);
        writer.string(mountOptions[i]);
      }
    }

    writer.uint32(66);
    writer.string(message.volumeMode);

    const nodeAffinity = message.nodeAffinity;
    if (nodeAffinity !== null) {
      writer.uint32(74);
      writer.fork();
      VolumeNodeAffinity.encode(nodeAffinity, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): PersistentVolumeSpec {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new PersistentVolumeSpec();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          let capacityKey: string = "";
          let capacityValue: Quantity | null = null;
          let capacityHasKey: bool = false;
          let capacityHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                capacityKey = reader.string();
                capacityHasKey = true;
                break;

              case 2:
                capacityValue = Quantity.decode(reader, reader.uint32());
                capacityHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.capacity === null) {
              message.capacity = new Map<string, Quantity>();
            }
            const capacity = message.capacity;
            if (
              capacity !== null &&
              capacityHasKey &&
              capacityHasValue &&
              capacityValue !== null
            ) {
              capacity.set(capacityKey, capacityValue);
            }
          }
          break;

        case 2:
          message.persistentVolumeSource = PersistentVolumeSource.decode(
            reader,
            reader.uint32()
          );
          break;

        case 3:
          message.accessModes.push(reader.string());
          break;

        case 4:
          message.claimRef = ObjectReference.decode(reader, reader.uint32());
          break;

        case 5:
          message.persistentVolumeReclaimPolicy = reader.string();
          break;

        case 6:
          message.storageClassName = reader.string();
          break;

        case 7:
          message.mountOptions.push(reader.string());
          break;

        case 8:
          message.volumeMode = reader.string();
          break;

        case 9:
          message.nodeAffinity = VolumeNodeAffinity.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  capacity: Map<string, Quantity>;
  persistentVolumeSource: PersistentVolumeSource | null;
  accessModes: Array<string>;
  claimRef: ObjectReference | null;
  persistentVolumeReclaimPolicy: string;
  storageClassName: string;
  mountOptions: Array<string>;
  volumeMode: string;
  nodeAffinity: VolumeNodeAffinity | null;

  constructor(
    capacity: Map<string, Quantity> = new Map(),
    persistentVolumeSource: PersistentVolumeSource | null = null,
    accessModes: Array<string> = [],
    claimRef: ObjectReference | null = null,
    persistentVolumeReclaimPolicy: string = "",
    storageClassName: string = "",
    mountOptions: Array<string> = [],
    volumeMode: string = "",
    nodeAffinity: VolumeNodeAffinity | null = null
  ) {
    this.capacity = capacity;
    this.persistentVolumeSource = persistentVolumeSource;
    this.accessModes = accessModes;
    this.claimRef = claimRef;
    this.persistentVolumeReclaimPolicy = persistentVolumeReclaimPolicy;
    this.storageClassName = storageClassName;
    this.mountOptions = mountOptions;
    this.volumeMode = volumeMode;
    this.nodeAffinity = nodeAffinity;
  }
}
