// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { ProbeHandler } from "./ProbeHandler";

export class Probe {
  static encode(message: Probe, writer: Writer): void {
    const handler = message.handler;
    if (handler !== null) {
      writer.uint32(10);
      writer.fork();
      ProbeHandler.encode(handler, writer);
      writer.ldelim();
    }

    writer.uint32(16);
    writer.int32(message.initialDelaySeconds);

    writer.uint32(24);
    writer.int32(message.timeoutSeconds);

    writer.uint32(32);
    writer.int32(message.periodSeconds);

    writer.uint32(40);
    writer.int32(message.successThreshold);

    writer.uint32(48);
    writer.int32(message.failureThreshold);

    writer.uint32(56);
    writer.int64(message.terminationGracePeriodSeconds);
  }

  static decode(reader: Reader, length: i32): Probe {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Probe();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.handler = ProbeHandler.decode(reader, reader.uint32());
          break;

        case 2:
          message.initialDelaySeconds = reader.int32();
          break;

        case 3:
          message.timeoutSeconds = reader.int32();
          break;

        case 4:
          message.periodSeconds = reader.int32();
          break;

        case 5:
          message.successThreshold = reader.int32();
          break;

        case 6:
          message.failureThreshold = reader.int32();
          break;

        case 7:
          message.terminationGracePeriodSeconds = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  handler: ProbeHandler | null;
  initialDelaySeconds: i32;
  timeoutSeconds: i32;
  periodSeconds: i32;
  successThreshold: i32;
  failureThreshold: i32;
  terminationGracePeriodSeconds: i64;

  constructor(
    handler: ProbeHandler | null = null,
    initialDelaySeconds: i32 = 0,
    timeoutSeconds: i32 = 0,
    periodSeconds: i32 = 0,
    successThreshold: i32 = 0,
    failureThreshold: i32 = 0,
    terminationGracePeriodSeconds: i64 = 0
  ) {
    this.handler = handler;
    this.initialDelaySeconds = initialDelaySeconds;
    this.timeoutSeconds = timeoutSeconds;
    this.periodSeconds = periodSeconds;
    this.successThreshold = successThreshold;
    this.failureThreshold = failureThreshold;
    this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
  }
}
