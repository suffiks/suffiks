// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { Quantity } from "../../../apimachinery/pkg/api/resource/Quantity";
import { ScopeSelector } from "./ScopeSelector";

export class ResourceQuotaSpec {
  static encode(message: ResourceQuotaSpec, writer: Writer): void {
    const hard = message.hard;
    if (hard !== null) {
      const hardKeys = hard.keys();
      for (let i: i32 = 0; i < hardKeys.length; ++i) {
        const hardKey = hardKeys[i];
        writer.uint32(10);
        writer.fork();
        writer.uint32(10);
        writer.string(hardKey);
        writer.uint32(18);
        writer.fork();
        Quantity.encode(hard.get(hardKey), writer);
        writer.ldelim();
        writer.ldelim();
      }
    }

    const scopes = message.scopes;
    if (scopes.length !== 0) {
      for (let i: i32 = 0; i < scopes.length; ++i) {
        writer.uint32(18);
        writer.string(scopes[i]);
      }
    }

    const scopeSelector = message.scopeSelector;
    if (scopeSelector !== null) {
      writer.uint32(26);
      writer.fork();
      ScopeSelector.encode(scopeSelector, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ResourceQuotaSpec {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ResourceQuotaSpec();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          let hardKey: string = "";
          let hardValue: Quantity | null = null;
          let hardHasKey: bool = false;
          let hardHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                hardKey = reader.string();
                hardHasKey = true;
                break;

              case 2:
                hardValue = Quantity.decode(reader, reader.uint32());
                hardHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.hard === null) {
              message.hard = new Map<string, Quantity>();
            }
            const hard = message.hard;
            if (
              hard !== null &&
              hardHasKey &&
              hardHasValue &&
              hardValue !== null
            ) {
              hard.set(hardKey, hardValue);
            }
          }
          break;

        case 2:
          message.scopes.push(reader.string());
          break;

        case 3:
          message.scopeSelector = ScopeSelector.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  hard: Map<string, Quantity>;
  scopes: Array<string>;
  scopeSelector: ScopeSelector | null;

  constructor(
    hard: Map<string, Quantity> = new Map(),
    scopes: Array<string> = [],
    scopeSelector: ScopeSelector | null = null
  ) {
    this.hard = hard;
    this.scopes = scopes;
    this.scopeSelector = scopeSelector;
  }
}
