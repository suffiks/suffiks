// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { Capabilities } from "./Capabilities";
import { SELinuxOptions } from "./SELinuxOptions";
import { WindowsSecurityContextOptions } from "./WindowsSecurityContextOptions";
import { SeccompProfile } from "./SeccompProfile";

export class SecurityContext {
  static encode(message: SecurityContext, writer: Writer): void {
    const capabilities = message.capabilities;
    if (capabilities !== null) {
      writer.uint32(10);
      writer.fork();
      Capabilities.encode(capabilities, writer);
      writer.ldelim();
    }

    writer.uint32(16);
    writer.bool(message.privileged);

    const seLinuxOptions = message.seLinuxOptions;
    if (seLinuxOptions !== null) {
      writer.uint32(26);
      writer.fork();
      SELinuxOptions.encode(seLinuxOptions, writer);
      writer.ldelim();
    }

    const windowsOptions = message.windowsOptions;
    if (windowsOptions !== null) {
      writer.uint32(82);
      writer.fork();
      WindowsSecurityContextOptions.encode(windowsOptions, writer);
      writer.ldelim();
    }

    writer.uint32(32);
    writer.int64(message.runAsUser);

    writer.uint32(64);
    writer.int64(message.runAsGroup);

    writer.uint32(40);
    writer.bool(message.runAsNonRoot);

    writer.uint32(48);
    writer.bool(message.readOnlyRootFilesystem);

    writer.uint32(56);
    writer.bool(message.allowPrivilegeEscalation);

    writer.uint32(74);
    writer.string(message.procMount);

    const seccompProfile = message.seccompProfile;
    if (seccompProfile !== null) {
      writer.uint32(90);
      writer.fork();
      SeccompProfile.encode(seccompProfile, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): SecurityContext {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SecurityContext();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.capabilities = Capabilities.decode(reader, reader.uint32());
          break;

        case 2:
          message.privileged = reader.bool();
          break;

        case 3:
          message.seLinuxOptions = SELinuxOptions.decode(
            reader,
            reader.uint32()
          );
          break;

        case 10:
          message.windowsOptions = WindowsSecurityContextOptions.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.runAsUser = reader.int64();
          break;

        case 8:
          message.runAsGroup = reader.int64();
          break;

        case 5:
          message.runAsNonRoot = reader.bool();
          break;

        case 6:
          message.readOnlyRootFilesystem = reader.bool();
          break;

        case 7:
          message.allowPrivilegeEscalation = reader.bool();
          break;

        case 9:
          message.procMount = reader.string();
          break;

        case 11:
          message.seccompProfile = SeccompProfile.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  capabilities: Capabilities | null;
  privileged: bool;
  seLinuxOptions: SELinuxOptions | null;
  windowsOptions: WindowsSecurityContextOptions | null;
  runAsUser: i64;
  runAsGroup: i64;
  runAsNonRoot: bool;
  readOnlyRootFilesystem: bool;
  allowPrivilegeEscalation: bool;
  procMount: string;
  seccompProfile: SeccompProfile | null;

  constructor(
    capabilities: Capabilities | null = null,
    privileged: bool = false,
    seLinuxOptions: SELinuxOptions | null = null,
    windowsOptions: WindowsSecurityContextOptions | null = null,
    runAsUser: i64 = 0,
    runAsGroup: i64 = 0,
    runAsNonRoot: bool = false,
    readOnlyRootFilesystem: bool = false,
    allowPrivilegeEscalation: bool = false,
    procMount: string = "",
    seccompProfile: SeccompProfile | null = null
  ) {
    this.capabilities = capabilities;
    this.privileged = privileged;
    this.seLinuxOptions = seLinuxOptions;
    this.windowsOptions = windowsOptions;
    this.runAsUser = runAsUser;
    this.runAsGroup = runAsGroup;
    this.runAsNonRoot = runAsNonRoot;
    this.readOnlyRootFilesystem = readOnlyRootFilesystem;
    this.allowPrivilegeEscalation = allowPrivilegeEscalation;
    this.procMount = procMount;
    this.seccompProfile = seccompProfile;
  }
}
