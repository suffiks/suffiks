// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { LabelSelectorRequirement } from "./LabelSelectorRequirement";

export class LabelSelector {
  static encode(message: LabelSelector, writer: Writer): void {
    const matchLabels = message.matchLabels;
    if (matchLabels !== null) {
      const matchLabelsKeys = matchLabels.keys();
      for (let i: i32 = 0; i < matchLabelsKeys.length; ++i) {
        const matchLabelsKey = matchLabelsKeys[i];
        writer.uint32(10);
        writer.fork();
        writer.uint32(10);
        writer.string(matchLabelsKey);
        writer.uint32(18);
        writer.string(matchLabels.get(matchLabelsKey));
        writer.ldelim();
      }
    }

    const matchExpressions = message.matchExpressions;
    for (let i: i32 = 0; i < matchExpressions.length; ++i) {
      writer.uint32(18);
      writer.fork();
      LabelSelectorRequirement.encode(matchExpressions[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): LabelSelector {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new LabelSelector();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          let matchLabelsKey: string = "";
          let matchLabelsValue: string = "";
          let matchLabelsHasKey: bool = false;
          let matchLabelsHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                matchLabelsKey = reader.string();
                matchLabelsHasKey = true;
                break;

              case 2:
                matchLabelsValue = reader.string();
                matchLabelsHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.matchLabels === null) {
              message.matchLabels = new Map<string, string>();
            }
            const matchLabels = message.matchLabels;
            if (
              matchLabels !== null &&
              matchLabelsHasKey &&
              matchLabelsHasValue
            ) {
              matchLabels.set(matchLabelsKey, matchLabelsValue);
            }
          }
          break;

        case 2:
          message.matchExpressions.push(
            LabelSelectorRequirement.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  matchLabels: Map<string, string>;
  matchExpressions: Array<LabelSelectorRequirement>;

  constructor(
    matchLabels: Map<string, string> = new Map(),
    matchExpressions: Array<LabelSelectorRequirement> = []
  ) {
    this.matchLabels = matchLabels;
    this.matchExpressions = matchExpressions;
  }
}
