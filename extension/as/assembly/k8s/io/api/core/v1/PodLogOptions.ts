// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { Time } from "../../../apimachinery/pkg/apis/meta/v1/Time";

export class PodLogOptions {
  static encode(message: PodLogOptions, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.container);

    writer.uint32(16);
    writer.bool(message.follow);

    writer.uint32(24);
    writer.bool(message.previous);

    writer.uint32(32);
    writer.int64(message.sinceSeconds);

    const sinceTime = message.sinceTime;
    if (sinceTime !== null) {
      writer.uint32(42);
      writer.fork();
      Time.encode(sinceTime, writer);
      writer.ldelim();
    }

    writer.uint32(48);
    writer.bool(message.timestamps);

    writer.uint32(56);
    writer.int64(message.tailLines);

    writer.uint32(64);
    writer.int64(message.limitBytes);

    writer.uint32(72);
    writer.bool(message.insecureSkipTLSVerifyBackend);
  }

  static decode(reader: Reader, length: i32): PodLogOptions {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new PodLogOptions();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.container = reader.string();
          break;

        case 2:
          message.follow = reader.bool();
          break;

        case 3:
          message.previous = reader.bool();
          break;

        case 4:
          message.sinceSeconds = reader.int64();
          break;

        case 5:
          message.sinceTime = Time.decode(reader, reader.uint32());
          break;

        case 6:
          message.timestamps = reader.bool();
          break;

        case 7:
          message.tailLines = reader.int64();
          break;

        case 8:
          message.limitBytes = reader.int64();
          break;

        case 9:
          message.insecureSkipTLSVerifyBackend = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  container: string;
  follow: bool;
  previous: bool;
  sinceSeconds: i64;
  sinceTime: Time | null;
  timestamps: bool;
  tailLines: i64;
  limitBytes: i64;
  insecureSkipTLSVerifyBackend: bool;

  constructor(
    container: string = "",
    follow: bool = false,
    previous: bool = false,
    sinceSeconds: i64 = 0,
    sinceTime: Time | null = null,
    timestamps: bool = false,
    tailLines: i64 = 0,
    limitBytes: i64 = 0,
    insecureSkipTLSVerifyBackend: bool = false
  ) {
    this.container = container;
    this.follow = follow;
    this.previous = previous;
    this.sinceSeconds = sinceSeconds;
    this.sinceTime = sinceTime;
    this.timestamps = timestamps;
    this.tailLines = tailLines;
    this.limitBytes = limitBytes;
    this.insecureSkipTLSVerifyBackend = insecureSkipTLSVerifyBackend;
  }
}
