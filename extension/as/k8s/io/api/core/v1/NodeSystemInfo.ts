// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";

export class NodeSystemInfo {
  static encode(message: NodeSystemInfo, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.machineID);

    writer.uint32(18);
    writer.string(message.systemUUID);

    writer.uint32(26);
    writer.string(message.bootID);

    writer.uint32(34);
    writer.string(message.kernelVersion);

    writer.uint32(42);
    writer.string(message.osImage);

    writer.uint32(50);
    writer.string(message.containerRuntimeVersion);

    writer.uint32(58);
    writer.string(message.kubeletVersion);

    writer.uint32(66);
    writer.string(message.kubeProxyVersion);

    writer.uint32(74);
    writer.string(message.operatingSystem);

    writer.uint32(82);
    writer.string(message.architecture);
  }

  static decode(reader: Reader, length: i32): NodeSystemInfo {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new NodeSystemInfo();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.machineID = reader.string();
          break;

        case 2:
          message.systemUUID = reader.string();
          break;

        case 3:
          message.bootID = reader.string();
          break;

        case 4:
          message.kernelVersion = reader.string();
          break;

        case 5:
          message.osImage = reader.string();
          break;

        case 6:
          message.containerRuntimeVersion = reader.string();
          break;

        case 7:
          message.kubeletVersion = reader.string();
          break;

        case 8:
          message.kubeProxyVersion = reader.string();
          break;

        case 9:
          message.operatingSystem = reader.string();
          break;

        case 10:
          message.architecture = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  machineID: string;
  systemUUID: string;
  bootID: string;
  kernelVersion: string;
  osImage: string;
  containerRuntimeVersion: string;
  kubeletVersion: string;
  kubeProxyVersion: string;
  operatingSystem: string;
  architecture: string;

  constructor(
    machineID: string = "",
    systemUUID: string = "",
    bootID: string = "",
    kernelVersion: string = "",
    osImage: string = "",
    containerRuntimeVersion: string = "",
    kubeletVersion: string = "",
    kubeProxyVersion: string = "",
    operatingSystem: string = "",
    architecture: string = ""
  ) {
    this.machineID = machineID;
    this.systemUUID = systemUUID;
    this.bootID = bootID;
    this.kernelVersion = kernelVersion;
    this.osImage = osImage;
    this.containerRuntimeVersion = containerRuntimeVersion;
    this.kubeletVersion = kubeletVersion;
    this.kubeProxyVersion = kubeProxyVersion;
    this.operatingSystem = operatingSystem;
    this.architecture = architecture;
  }
}
