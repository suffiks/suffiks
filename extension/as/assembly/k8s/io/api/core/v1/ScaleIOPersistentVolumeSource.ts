// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { SecretReference } from "./SecretReference";

export class ScaleIOPersistentVolumeSource {
  static encode(message: ScaleIOPersistentVolumeSource, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.gateway);

    writer.uint32(18);
    writer.string(message.system);

    const secretRef = message.secretRef;
    if (secretRef !== null) {
      writer.uint32(26);
      writer.fork();
      SecretReference.encode(secretRef, writer);
      writer.ldelim();
    }

    writer.uint32(32);
    writer.bool(message.sslEnabled);

    writer.uint32(42);
    writer.string(message.protectionDomain);

    writer.uint32(50);
    writer.string(message.storagePool);

    writer.uint32(58);
    writer.string(message.storageMode);

    writer.uint32(66);
    writer.string(message.volumeName);

    writer.uint32(74);
    writer.string(message.fsType);

    writer.uint32(80);
    writer.bool(message.readOnly);
  }

  static decode(reader: Reader, length: i32): ScaleIOPersistentVolumeSource {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ScaleIOPersistentVolumeSource();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.gateway = reader.string();
          break;

        case 2:
          message.system = reader.string();
          break;

        case 3:
          message.secretRef = SecretReference.decode(reader, reader.uint32());
          break;

        case 4:
          message.sslEnabled = reader.bool();
          break;

        case 5:
          message.protectionDomain = reader.string();
          break;

        case 6:
          message.storagePool = reader.string();
          break;

        case 7:
          message.storageMode = reader.string();
          break;

        case 8:
          message.volumeName = reader.string();
          break;

        case 9:
          message.fsType = reader.string();
          break;

        case 10:
          message.readOnly = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  gateway: string;
  system: string;
  secretRef: SecretReference | null;
  sslEnabled: bool;
  protectionDomain: string;
  storagePool: string;
  storageMode: string;
  volumeName: string;
  fsType: string;
  readOnly: bool;

  constructor(
    gateway: string = "",
    system: string = "",
    secretRef: SecretReference | null = null,
    sslEnabled: bool = false,
    protectionDomain: string = "",
    storagePool: string = "",
    storageMode: string = "",
    volumeName: string = "",
    fsType: string = "",
    readOnly: bool = false
  ) {
    this.gateway = gateway;
    this.system = system;
    this.secretRef = secretRef;
    this.sslEnabled = sslEnabled;
    this.protectionDomain = protectionDomain;
    this.storagePool = storagePool;
    this.storageMode = storageMode;
    this.volumeName = volumeName;
    this.fsType = fsType;
    this.readOnly = readOnly;
  }
}
