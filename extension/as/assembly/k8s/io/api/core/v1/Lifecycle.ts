// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { LifecycleHandler } from "./LifecycleHandler";

export class Lifecycle {
  static encode(message: Lifecycle, writer: Writer): void {
    const postStart = message.postStart;
    if (postStart !== null) {
      writer.uint32(10);
      writer.fork();
      LifecycleHandler.encode(postStart, writer);
      writer.ldelim();
    }

    const preStop = message.preStop;
    if (preStop !== null) {
      writer.uint32(18);
      writer.fork();
      LifecycleHandler.encode(preStop, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Lifecycle {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Lifecycle();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.postStart = LifecycleHandler.decode(reader, reader.uint32());
          break;

        case 2:
          message.preStop = LifecycleHandler.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  postStart: LifecycleHandler | null;
  preStop: LifecycleHandler | null;

  constructor(
    postStart: LifecycleHandler | null = null,
    preStop: LifecycleHandler | null = null
  ) {
    this.postStart = postStart;
    this.preStop = preStop;
  }
}
