// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { Time } from "./Time";
import { FieldsV1 } from "./FieldsV1";

export class ManagedFieldsEntry {
  static encode(message: ManagedFieldsEntry, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.manager);

    writer.uint32(18);
    writer.string(message.operation);

    writer.uint32(26);
    writer.string(message.apiVersion);

    const time = message.time;
    if (time !== null) {
      writer.uint32(34);
      writer.fork();
      Time.encode(time, writer);
      writer.ldelim();
    }

    writer.uint32(50);
    writer.string(message.fieldsType);

    const fieldsV1 = message.fieldsV1;
    if (fieldsV1 !== null) {
      writer.uint32(58);
      writer.fork();
      FieldsV1.encode(fieldsV1, writer);
      writer.ldelim();
    }

    writer.uint32(66);
    writer.string(message.subresource);
  }

  static decode(reader: Reader, length: i32): ManagedFieldsEntry {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ManagedFieldsEntry();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.manager = reader.string();
          break;

        case 2:
          message.operation = reader.string();
          break;

        case 3:
          message.apiVersion = reader.string();
          break;

        case 4:
          message.time = Time.decode(reader, reader.uint32());
          break;

        case 6:
          message.fieldsType = reader.string();
          break;

        case 7:
          message.fieldsV1 = FieldsV1.decode(reader, reader.uint32());
          break;

        case 8:
          message.subresource = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  manager: string;
  operation: string;
  apiVersion: string;
  time: Time | null;
  fieldsType: string;
  fieldsV1: FieldsV1 | null;
  subresource: string;

  constructor(
    manager: string = "",
    operation: string = "",
    apiVersion: string = "",
    time: Time | null = null,
    fieldsType: string = "",
    fieldsV1: FieldsV1 | null = null,
    subresource: string = ""
  ) {
    this.manager = manager;
    this.operation = operation;
    this.apiVersion = apiVersion;
    this.time = time;
    this.fieldsType = fieldsType;
    this.fieldsV1 = fieldsV1;
    this.subresource = subresource;
  }
}
