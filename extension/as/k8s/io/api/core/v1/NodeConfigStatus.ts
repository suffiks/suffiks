// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { NodeConfigSource } from "./NodeConfigSource";

export class NodeConfigStatus {
  static encode(message: NodeConfigStatus, writer: Writer): void {
    const assigned = message.assigned;
    if (assigned !== null) {
      writer.uint32(10);
      writer.fork();
      NodeConfigSource.encode(assigned, writer);
      writer.ldelim();
    }

    const active = message.active;
    if (active !== null) {
      writer.uint32(18);
      writer.fork();
      NodeConfigSource.encode(active, writer);
      writer.ldelim();
    }

    const lastKnownGood = message.lastKnownGood;
    if (lastKnownGood !== null) {
      writer.uint32(26);
      writer.fork();
      NodeConfigSource.encode(lastKnownGood, writer);
      writer.ldelim();
    }

    writer.uint32(34);
    writer.string(message.error);
  }

  static decode(reader: Reader, length: i32): NodeConfigStatus {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new NodeConfigStatus();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.assigned = NodeConfigSource.decode(reader, reader.uint32());
          break;

        case 2:
          message.active = NodeConfigSource.decode(reader, reader.uint32());
          break;

        case 3:
          message.lastKnownGood = NodeConfigSource.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.error = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  assigned: NodeConfigSource | null;
  active: NodeConfigSource | null;
  lastKnownGood: NodeConfigSource | null;
  error: string;

  constructor(
    assigned: NodeConfigSource | null = null,
    active: NodeConfigSource | null = null,
    lastKnownGood: NodeConfigSource | null = null,
    error: string = ""
  ) {
    this.assigned = assigned;
    this.active = active;
    this.lastKnownGood = lastKnownGood;
    this.error = error;
  }
}
