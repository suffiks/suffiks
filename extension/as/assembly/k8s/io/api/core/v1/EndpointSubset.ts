// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { EndpointAddress } from "./EndpointAddress";
import { EndpointPort } from "./EndpointPort";

export class EndpointSubset {
  static encode(message: EndpointSubset, writer: Writer): void {
    const addresses = message.addresses;
    for (let i: i32 = 0; i < addresses.length; ++i) {
      writer.uint32(10);
      writer.fork();
      EndpointAddress.encode(addresses[i], writer);
      writer.ldelim();
    }

    const notReadyAddresses = message.notReadyAddresses;
    for (let i: i32 = 0; i < notReadyAddresses.length; ++i) {
      writer.uint32(18);
      writer.fork();
      EndpointAddress.encode(notReadyAddresses[i], writer);
      writer.ldelim();
    }

    const ports = message.ports;
    for (let i: i32 = 0; i < ports.length; ++i) {
      writer.uint32(26);
      writer.fork();
      EndpointPort.encode(ports[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): EndpointSubset {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new EndpointSubset();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.addresses.push(
            EndpointAddress.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.notReadyAddresses.push(
            EndpointAddress.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.ports.push(EndpointPort.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  addresses: Array<EndpointAddress>;
  notReadyAddresses: Array<EndpointAddress>;
  ports: Array<EndpointPort>;

  constructor(
    addresses: Array<EndpointAddress> = [],
    notReadyAddresses: Array<EndpointAddress> = [],
    ports: Array<EndpointPort> = []
  ) {
    this.addresses = addresses;
    this.notReadyAddresses = notReadyAddresses;
    this.ports = ports;
  }
}
