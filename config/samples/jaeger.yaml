kind: Namespace
apiVersion: v1
metadata:
  name: jaeger
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger
  namespace: jaeger
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: all-in-one
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: jaeger
  template:
    metadata:
      labels:
        app: jaeger
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/component: all-in-one
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "16686"
    spec:
      containers:
        - env:
            - name: COLLECTOR_ZIPKIN_HTTP_PORT
              value: "9411"
          image: jaegertracing/all-in-one
          name: jaeger
          ports:
            - containerPort: 5775
              protocol: UDP
            - containerPort: 6831
              protocol: UDP
            - containerPort: 6832
              protocol: UDP
            - containerPort: 5778
              protocol: TCP
            - containerPort: 16686
              protocol: TCP
            - containerPort: 9411
              protocol: TCP
          readinessProbe:
            httpGet:
              path: "/"
              port: 14269
            initialDelaySeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: jaeger
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: query
spec:
  ports:
    - name: query-http
      port: 80
      protocol: TCP
      targetPort: 16686
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: all-in-one
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  namespace: jaeger
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: collector
spec:
  ports:
    - name: jaeger-collector-tchannel
      port: 14267
      protocol: TCP
      targetPort: 14267
    - name: jaeger-collector-http
      port: 14268
      protocol: TCP
      targetPort: 14268
    - name: jaeger-collector-zipkin
      port: 9411
      protocol: TCP
      targetPort: 9411
    - name: jaeger-collector-grpc
      port: 14250
      protocol: TCP
      targetPort: 14250
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: all-in-one
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector-node
  namespace: jaeger
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: collector
spec:
  type: NodePort
  ports:
    - name: jaeger-collector-http
      protocol: TCP
      port: 55680
      targetPort: 55680
      nodePort: 32767
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: all-in-one
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-agent
  namespace: jaeger
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: agent
spec:
  ports:
    - name: agent-zipkin-thrift
      port: 5775
      protocol: UDP
      targetPort: 5775
    - name: agent-compact
      port: 6831
      protocol: UDP
      targetPort: 6831
    - name: agent-binary
      port: 6832
      protocol: UDP
      targetPort: 6832
    - name: agent-configs
      port: 5778
      protocol: TCP
      targetPort: 5778
  clusterIP: None
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: all-in-one
---
apiVersion: v1
data:
  otel-collector-config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
    processors:
      batch: {}
    exporters:
      jaeger:
        # This is the jaeger pod's IP, and is hardcoded for the demo,
        # since there is no kube-proxy on the master node
        endpoint: "jaeger-collector:14250"
        tls:
          insecure: true
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [jaeger]
kind: ConfigMap
metadata:
  labels:
    app: opentelemetry
    component: otel-collector
  name: otel-collector-conf
  namespace: jaeger

---
apiVersion: v1
kind: Pod
metadata:
  name: otel-collector
  namespace: jaeger
  labels:
    app: opentelemetry
    component: otel-collector
spec:
  # We need to run on the same network as the API Server
  # hostNetwork: true
  containers:
    - args:
        - "--config=/conf/otel-collector-config.yaml"
      image: otel/opentelemetry-collector-contrib-dev:latest
      name: otel-collector
      resources:
        limits:
          cpu: 1
        requests:
          cpu: 1m
          memory: 1Mi
      ports:
        # This is the default port for OpenTelemetry
        - containerPort: 4317
      volumeMounts:
        - name: otel-collector-config-vol
          mountPath: /conf
  volumes:
    - configMap:
        name: otel-collector-conf
        items:
          - key: otel-collector-config.yaml
            path: otel-collector-config.yaml
      name: otel-collector-config-vol

---
apiVersion: v1
kind: Service
metadata:
  name: collector
  namespace: jaeger
  labels:
    app: opentelemetry
    component: otel-collector
spec:
  ports:
    - name: otel-collector
      port: 4317
      protocol: TCP
      targetPort: 4317
  selector:
    app: opentelemetry
    component: otel-collector
