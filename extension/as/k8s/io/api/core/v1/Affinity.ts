// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { NodeAffinity } from "./NodeAffinity";
import { PodAffinity } from "./PodAffinity";
import { PodAntiAffinity } from "./PodAntiAffinity";

export class Affinity {
  static encode(message: Affinity, writer: Writer): void {
    const nodeAffinity = message.nodeAffinity;
    if (nodeAffinity !== null) {
      writer.uint32(10);
      writer.fork();
      NodeAffinity.encode(nodeAffinity, writer);
      writer.ldelim();
    }

    const podAffinity = message.podAffinity;
    if (podAffinity !== null) {
      writer.uint32(18);
      writer.fork();
      PodAffinity.encode(podAffinity, writer);
      writer.ldelim();
    }

    const podAntiAffinity = message.podAntiAffinity;
    if (podAntiAffinity !== null) {
      writer.uint32(26);
      writer.fork();
      PodAntiAffinity.encode(podAntiAffinity, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Affinity {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Affinity();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.nodeAffinity = NodeAffinity.decode(reader, reader.uint32());
          break;

        case 2:
          message.podAffinity = PodAffinity.decode(reader, reader.uint32());
          break;

        case 3:
          message.podAntiAffinity = PodAntiAffinity.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  nodeAffinity: NodeAffinity | null;
  podAffinity: PodAffinity | null;
  podAntiAffinity: PodAntiAffinity | null;

  constructor(
    nodeAffinity: NodeAffinity | null = null,
    podAffinity: PodAffinity | null = null,
    podAntiAffinity: PodAntiAffinity | null = null
  ) {
    this.nodeAffinity = nodeAffinity;
    this.podAffinity = podAffinity;
    this.podAntiAffinity = podAntiAffinity;
  }
}
