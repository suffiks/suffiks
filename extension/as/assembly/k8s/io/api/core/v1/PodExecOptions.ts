// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";

export class PodExecOptions {
  static encode(message: PodExecOptions, writer: Writer): void {
    writer.uint32(8);
    writer.bool(message.stdin);

    writer.uint32(16);
    writer.bool(message.stdout);

    writer.uint32(24);
    writer.bool(message.stderr);

    writer.uint32(32);
    writer.bool(message.tty);

    writer.uint32(42);
    writer.string(message.container);

    const command = message.command;
    if (command.length !== 0) {
      for (let i: i32 = 0; i < command.length; ++i) {
        writer.uint32(50);
        writer.string(command[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): PodExecOptions {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new PodExecOptions();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.stdin = reader.bool();
          break;

        case 2:
          message.stdout = reader.bool();
          break;

        case 3:
          message.stderr = reader.bool();
          break;

        case 4:
          message.tty = reader.bool();
          break;

        case 5:
          message.container = reader.string();
          break;

        case 6:
          message.command.push(reader.string());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  stdin: bool;
  stdout: bool;
  stderr: bool;
  tty: bool;
  container: string;
  command: Array<string>;

  constructor(
    stdin: bool = false,
    stdout: bool = false,
    stderr: bool = false,
    tty: bool = false,
    container: string = "",
    command: Array<string> = []
  ) {
    this.stdin = stdin;
    this.stdout = stdout;
    this.stderr = stderr;
    this.tty = tty;
    this.container = container;
    this.command = command;
  }
}
