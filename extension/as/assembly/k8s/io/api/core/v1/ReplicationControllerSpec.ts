// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { PodTemplateSpec } from "./PodTemplateSpec";

export class ReplicationControllerSpec {
  static encode(message: ReplicationControllerSpec, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.replicas);

    writer.uint32(32);
    writer.int32(message.minReadySeconds);

    const selector = message.selector;
    if (selector !== null) {
      const selectorKeys = selector.keys();
      for (let i: i32 = 0; i < selectorKeys.length; ++i) {
        const selectorKey = selectorKeys[i];
        writer.uint32(18);
        writer.fork();
        writer.uint32(10);
        writer.string(selectorKey);
        writer.uint32(18);
        writer.string(selector.get(selectorKey));
        writer.ldelim();
      }
    }

    const template = message.template;
    if (template !== null) {
      writer.uint32(26);
      writer.fork();
      PodTemplateSpec.encode(template, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ReplicationControllerSpec {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ReplicationControllerSpec();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.replicas = reader.int32();
          break;

        case 4:
          message.minReadySeconds = reader.int32();
          break;

        case 2:
          let selectorKey: string = "";
          let selectorValue: string = "";
          let selectorHasKey: bool = false;
          let selectorHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                selectorKey = reader.string();
                selectorHasKey = true;
                break;

              case 2:
                selectorValue = reader.string();
                selectorHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.selector === null) {
              message.selector = new Map<string, string>();
            }
            const selector = message.selector;
            if (selector !== null && selectorHasKey && selectorHasValue) {
              selector.set(selectorKey, selectorValue);
            }
          }
          break;

        case 3:
          message.template = PodTemplateSpec.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  replicas: i32;
  minReadySeconds: i32;
  selector: Map<string, string>;
  template: PodTemplateSpec | null;

  constructor(
    replicas: i32 = 0,
    minReadySeconds: i32 = 0,
    selector: Map<string, string> = new Map(),
    template: PodTemplateSpec | null = null
  ) {
    this.replicas = replicas;
    this.minReadySeconds = minReadySeconds;
    this.selector = selector;
    this.template = template;
  }
}
