// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";

export class PatchOptions {
  static encode(message: PatchOptions, writer: Writer): void {
    const dryRun = message.dryRun;
    if (dryRun.length !== 0) {
      for (let i: i32 = 0; i < dryRun.length; ++i) {
        writer.uint32(10);
        writer.string(dryRun[i]);
      }
    }

    writer.uint32(16);
    writer.bool(message.force);

    writer.uint32(26);
    writer.string(message.fieldManager);

    writer.uint32(34);
    writer.string(message.fieldValidation);
  }

  static decode(reader: Reader, length: i32): PatchOptions {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new PatchOptions();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.dryRun.push(reader.string());
          break;

        case 2:
          message.force = reader.bool();
          break;

        case 3:
          message.fieldManager = reader.string();
          break;

        case 4:
          message.fieldValidation = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  dryRun: Array<string>;
  force: bool;
  fieldManager: string;
  fieldValidation: string;

  constructor(
    dryRun: Array<string> = [],
    force: bool = false,
    fieldManager: string = "",
    fieldValidation: string = ""
  ) {
    this.dryRun = dryRun;
    this.force = force;
    this.fieldManager = fieldManager;
    this.fieldValidation = fieldValidation;
  }
}
