// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { Time } from "./Time";
import { OwnerReference } from "./OwnerReference";
import { ManagedFieldsEntry } from "./ManagedFieldsEntry";

export class ObjectMeta {
  static encode(message: ObjectMeta, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.name);

    writer.uint32(18);
    writer.string(message.generateName);

    writer.uint32(26);
    writer.string(message.namespace);

    writer.uint32(34);
    writer.string(message.selfLink);

    writer.uint32(42);
    writer.string(message.uid);

    writer.uint32(50);
    writer.string(message.resourceVersion);

    writer.uint32(56);
    writer.int64(message.generation);

    const creationTimestamp = message.creationTimestamp;
    if (creationTimestamp !== null) {
      writer.uint32(66);
      writer.fork();
      Time.encode(creationTimestamp, writer);
      writer.ldelim();
    }

    const deletionTimestamp = message.deletionTimestamp;
    if (deletionTimestamp !== null) {
      writer.uint32(74);
      writer.fork();
      Time.encode(deletionTimestamp, writer);
      writer.ldelim();
    }

    writer.uint32(80);
    writer.int64(message.deletionGracePeriodSeconds);

    const labels = message.labels;
    if (labels !== null) {
      const labelsKeys = labels.keys();
      for (let i: i32 = 0; i < labelsKeys.length; ++i) {
        const labelsKey = labelsKeys[i];
        writer.uint32(90);
        writer.fork();
        writer.uint32(10);
        writer.string(labelsKey);
        writer.uint32(18);
        writer.string(labels.get(labelsKey));
        writer.ldelim();
      }
    }

    const annotations = message.annotations;
    if (annotations !== null) {
      const annotationsKeys = annotations.keys();
      for (let i: i32 = 0; i < annotationsKeys.length; ++i) {
        const annotationsKey = annotationsKeys[i];
        writer.uint32(98);
        writer.fork();
        writer.uint32(10);
        writer.string(annotationsKey);
        writer.uint32(18);
        writer.string(annotations.get(annotationsKey));
        writer.ldelim();
      }
    }

    const ownerReferences = message.ownerReferences;
    for (let i: i32 = 0; i < ownerReferences.length; ++i) {
      writer.uint32(106);
      writer.fork();
      OwnerReference.encode(ownerReferences[i], writer);
      writer.ldelim();
    }

    const finalizers = message.finalizers;
    if (finalizers.length !== 0) {
      for (let i: i32 = 0; i < finalizers.length; ++i) {
        writer.uint32(114);
        writer.string(finalizers[i]);
      }
    }

    const managedFields = message.managedFields;
    for (let i: i32 = 0; i < managedFields.length; ++i) {
      writer.uint32(138);
      writer.fork();
      ManagedFieldsEntry.encode(managedFields[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ObjectMeta {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ObjectMeta();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;

        case 2:
          message.generateName = reader.string();
          break;

        case 3:
          message.namespace = reader.string();
          break;

        case 4:
          message.selfLink = reader.string();
          break;

        case 5:
          message.uid = reader.string();
          break;

        case 6:
          message.resourceVersion = reader.string();
          break;

        case 7:
          message.generation = reader.int64();
          break;

        case 8:
          message.creationTimestamp = Time.decode(reader, reader.uint32());
          break;

        case 9:
          message.deletionTimestamp = Time.decode(reader, reader.uint32());
          break;

        case 10:
          message.deletionGracePeriodSeconds = reader.int64();
          break;

        case 11:
          let labelsKey: string = "";
          let labelsValue: string = "";
          let labelsHasKey: bool = false;
          let labelsHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                labelsKey = reader.string();
                labelsHasKey = true;
                break;

              case 2:
                labelsValue = reader.string();
                labelsHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.labels === null) {
              message.labels = new Map<string, string>();
            }
            const labels = message.labels;
            if (labels !== null && labelsHasKey && labelsHasValue) {
              labels.set(labelsKey, labelsValue);
            }
          }
          break;

        case 12:
          let annotationsKey: string = "";
          let annotationsValue: string = "";
          let annotationsHasKey: bool = false;
          let annotationsHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                annotationsKey = reader.string();
                annotationsHasKey = true;
                break;

              case 2:
                annotationsValue = reader.string();
                annotationsHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.annotations === null) {
              message.annotations = new Map<string, string>();
            }
            const annotations = message.annotations;
            if (
              annotations !== null &&
              annotationsHasKey &&
              annotationsHasValue
            ) {
              annotations.set(annotationsKey, annotationsValue);
            }
          }
          break;

        case 13:
          message.ownerReferences.push(
            OwnerReference.decode(reader, reader.uint32())
          );
          break;

        case 14:
          message.finalizers.push(reader.string());
          break;

        case 17:
          message.managedFields.push(
            ManagedFieldsEntry.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  name: string;
  generateName: string;
  namespace: string;
  selfLink: string;
  uid: string;
  resourceVersion: string;
  generation: i64;
  creationTimestamp: Time | null;
  deletionTimestamp: Time | null;
  deletionGracePeriodSeconds: i64;
  labels: Map<string, string>;
  annotations: Map<string, string>;
  ownerReferences: Array<OwnerReference>;
  finalizers: Array<string>;
  managedFields: Array<ManagedFieldsEntry>;

  constructor(
    name: string = "",
    generateName: string = "",
    namespace: string = "",
    selfLink: string = "",
    uid: string = "",
    resourceVersion: string = "",
    generation: i64 = 0,
    creationTimestamp: Time | null = null,
    deletionTimestamp: Time | null = null,
    deletionGracePeriodSeconds: i64 = 0,
    labels: Map<string, string> = new Map(),
    annotations: Map<string, string> = new Map(),
    ownerReferences: Array<OwnerReference> = [],
    finalizers: Array<string> = [],
    managedFields: Array<ManagedFieldsEntry> = []
  ) {
    this.name = name;
    this.generateName = generateName;
    this.namespace = namespace;
    this.selfLink = selfLink;
    this.uid = uid;
    this.resourceVersion = resourceVersion;
    this.generation = generation;
    this.creationTimestamp = creationTimestamp;
    this.deletionTimestamp = deletionTimestamp;
    this.deletionGracePeriodSeconds = deletionGracePeriodSeconds;
    this.labels = labels;
    this.annotations = annotations;
    this.ownerReferences = ownerReferences;
    this.finalizers = finalizers;
    this.managedFields = managedFields;
  }
}
