// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { LocalObjectReference } from "./LocalObjectReference";

export class FlexVolumeSource {
  static encode(message: FlexVolumeSource, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.driver);

    writer.uint32(18);
    writer.string(message.fsType);

    const secretRef = message.secretRef;
    if (secretRef !== null) {
      writer.uint32(26);
      writer.fork();
      LocalObjectReference.encode(secretRef, writer);
      writer.ldelim();
    }

    writer.uint32(32);
    writer.bool(message.readOnly);

    const options = message.options;
    if (options !== null) {
      const optionsKeys = options.keys();
      for (let i: i32 = 0; i < optionsKeys.length; ++i) {
        const optionsKey = optionsKeys[i];
        writer.uint32(42);
        writer.fork();
        writer.uint32(10);
        writer.string(optionsKey);
        writer.uint32(18);
        writer.string(options.get(optionsKey));
        writer.ldelim();
      }
    }
  }

  static decode(reader: Reader, length: i32): FlexVolumeSource {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new FlexVolumeSource();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.driver = reader.string();
          break;

        case 2:
          message.fsType = reader.string();
          break;

        case 3:
          message.secretRef = LocalObjectReference.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.readOnly = reader.bool();
          break;

        case 5:
          let optionsKey: string = "";
          let optionsValue: string = "";
          let optionsHasKey: bool = false;
          let optionsHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                optionsKey = reader.string();
                optionsHasKey = true;
                break;

              case 2:
                optionsValue = reader.string();
                optionsHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.options === null) {
              message.options = new Map<string, string>();
            }
            const options = message.options;
            if (options !== null && optionsHasKey && optionsHasValue) {
              options.set(optionsKey, optionsValue);
            }
          }
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  driver: string;
  fsType: string;
  secretRef: LocalObjectReference | null;
  readOnly: bool;
  options: Map<string, string>;

  constructor(
    driver: string = "",
    fsType: string = "",
    secretRef: LocalObjectReference | null = null,
    readOnly: bool = false,
    options: Map<string, string> = new Map()
  ) {
    this.driver = driver;
    this.fsType = fsType;
    this.secretRef = secretRef;
    this.readOnly = readOnly;
    this.options = options;
  }
}
