// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { SecretProjection } from "./SecretProjection";
import { DownwardAPIProjection } from "./DownwardAPIProjection";
import { ConfigMapProjection } from "./ConfigMapProjection";
import { ServiceAccountTokenProjection } from "./ServiceAccountTokenProjection";

export class VolumeProjection {
  static encode(message: VolumeProjection, writer: Writer): void {
    const secret = message.secret;
    if (secret !== null) {
      writer.uint32(10);
      writer.fork();
      SecretProjection.encode(secret, writer);
      writer.ldelim();
    }

    const downwardAPI = message.downwardAPI;
    if (downwardAPI !== null) {
      writer.uint32(18);
      writer.fork();
      DownwardAPIProjection.encode(downwardAPI, writer);
      writer.ldelim();
    }

    const configMap = message.configMap;
    if (configMap !== null) {
      writer.uint32(26);
      writer.fork();
      ConfigMapProjection.encode(configMap, writer);
      writer.ldelim();
    }

    const serviceAccountToken = message.serviceAccountToken;
    if (serviceAccountToken !== null) {
      writer.uint32(34);
      writer.fork();
      ServiceAccountTokenProjection.encode(serviceAccountToken, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): VolumeProjection {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new VolumeProjection();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.secret = SecretProjection.decode(reader, reader.uint32());
          break;

        case 2:
          message.downwardAPI = DownwardAPIProjection.decode(
            reader,
            reader.uint32()
          );
          break;

        case 3:
          message.configMap = ConfigMapProjection.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.serviceAccountToken = ServiceAccountTokenProjection.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  secret: SecretProjection | null;
  downwardAPI: DownwardAPIProjection | null;
  configMap: ConfigMapProjection | null;
  serviceAccountToken: ServiceAccountTokenProjection | null;

  constructor(
    secret: SecretProjection | null = null,
    downwardAPI: DownwardAPIProjection | null = null,
    configMap: ConfigMapProjection | null = null,
    serviceAccountToken: ServiceAccountTokenProjection | null = null
  ) {
    this.secret = secret;
    this.downwardAPI = downwardAPI;
    this.configMap = configMap;
    this.serviceAccountToken = serviceAccountToken;
  }
}
