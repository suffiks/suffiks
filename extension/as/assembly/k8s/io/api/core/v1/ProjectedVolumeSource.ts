// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { VolumeProjection } from "./VolumeProjection";

export class ProjectedVolumeSource {
  static encode(message: ProjectedVolumeSource, writer: Writer): void {
    const sources = message.sources;
    for (let i: i32 = 0; i < sources.length; ++i) {
      writer.uint32(10);
      writer.fork();
      VolumeProjection.encode(sources[i], writer);
      writer.ldelim();
    }

    writer.uint32(16);
    writer.int32(message.defaultMode);
  }

  static decode(reader: Reader, length: i32): ProjectedVolumeSource {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ProjectedVolumeSource();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sources.push(
            VolumeProjection.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.defaultMode = reader.int32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sources: Array<VolumeProjection>;
  defaultMode: i32;

  constructor(sources: Array<VolumeProjection> = [], defaultMode: i32 = 0) {
    this.sources = sources;
    this.defaultMode = defaultMode;
  }
}
