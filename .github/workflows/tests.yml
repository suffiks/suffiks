name: Go tests

on:
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get Go version from .mise.toml
        id: go-version
        run: echo GOVERSION=$(grep -E '^go (.*)$$' .mise.toml | awk -F'"' '{print $2}') >> "$GITHUB_OUTPUT"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go-version.outputs.GOVERSION }}

      - name: Tests
        run: make test-ci

  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      # Let golangci-lint comment on PRs
      pull-requests: read
    steps:
      - uses: actions/checkout@v4

      - name: Get Go version from .mise.toml
        id: go-version
        run: |
          echo GOVERSION=$(grep -E '^go (.*)$$' .mise.toml | awk -F'"' '{print $2}') >> "$GITHUB_OUTPUT"
          echo GOLANGCI_LINT=$(grep -E '^golangci-lint (.*)$$' .mise.toml | awk -F'"' '{print $2}') >> "$GITHUB_OUTPUT"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go-version.outputs.GOVERSION }}

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v5
        with:
          version: v${{ steps.go-version.outputs.GOLANGCI_LINT }}

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          only-new-issues: true

          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          skip-pkg-cache: true

          args: --timeout=30m

  generated-code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Mise
        uses: jdx/mise-action@v2

      # - name: asdf cache
      #   id: asdf-cache
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.asdf/
      #     key: ${{ runner.os }}-asdf-${{ hashFiles('**/.toolgi-versions') }}

      # - name: Install CD tools from .tool-versions
      #   if: steps.asdf-cache.outputs.cache-hit != 'true'
      #   uses: asdf-vm/actions/install@v3
      #   with:
      #     # Go is a dependency on two of the tools, so we install it first.
      #     before_install: |
      #       asdf install golang latest
      #       asdf global golang latest

      - name: Find go cache dir
        id: go-cache
        run: |
          # Clear cache dirs to avoid error when restoring
          go clean -cache -modcache
          echo "gocache=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "gomodcache=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

      - name: Cache go modules
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.go-cache.outputs.gocache }}
            ${{ steps.go-cache.outputs.gomodcache }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Check generated code
        run: |
          make generate
          make manifests
          make client
          make gen-extensions
          make gen-wasi-env
          git diff --exit-code --name-only
