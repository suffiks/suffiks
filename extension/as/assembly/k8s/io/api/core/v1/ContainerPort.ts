// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";

export class ContainerPort {
  static encode(message: ContainerPort, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.name);

    writer.uint32(16);
    writer.int32(message.hostPort);

    writer.uint32(24);
    writer.int32(message.containerPort);

    writer.uint32(34);
    writer.string(message.protocol);

    writer.uint32(42);
    writer.string(message.hostIP);
  }

  static decode(reader: Reader, length: i32): ContainerPort {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ContainerPort();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;

        case 2:
          message.hostPort = reader.int32();
          break;

        case 3:
          message.containerPort = reader.int32();
          break;

        case 4:
          message.protocol = reader.string();
          break;

        case 5:
          message.hostIP = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  name: string;
  hostPort: i32;
  containerPort: i32;
  protocol: string;
  hostIP: string;

  constructor(
    name: string = "",
    hostPort: i32 = 0,
    containerPort: i32 = 0,
    protocol: string = "",
    hostIP: string = ""
  ) {
    this.name = name;
    this.hostPort = hostPort;
    this.containerPort = containerPort;
    this.protocol = protocol;
    this.hostIP = hostIP;
  }
}
