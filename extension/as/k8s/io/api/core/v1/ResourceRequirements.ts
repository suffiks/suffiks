// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { Quantity } from "../../../apimachinery/pkg/api/resource/Quantity";

export class ResourceRequirements {
  static encode(message: ResourceRequirements, writer: Writer): void {
    const limits = message.limits;
    if (limits !== null) {
      const limitsKeys = limits.keys();
      for (let i: i32 = 0; i < limitsKeys.length; ++i) {
        const limitsKey = limitsKeys[i];
        writer.uint32(10);
        writer.fork();
        writer.uint32(10);
        writer.string(limitsKey);
        writer.uint32(18);
        writer.fork();
        Quantity.encode(limits.get(limitsKey), writer);
        writer.ldelim();
        writer.ldelim();
      }
    }

    const requests = message.requests;
    if (requests !== null) {
      const requestsKeys = requests.keys();
      for (let i: i32 = 0; i < requestsKeys.length; ++i) {
        const requestsKey = requestsKeys[i];
        writer.uint32(18);
        writer.fork();
        writer.uint32(10);
        writer.string(requestsKey);
        writer.uint32(18);
        writer.fork();
        Quantity.encode(requests.get(requestsKey), writer);
        writer.ldelim();
        writer.ldelim();
      }
    }
  }

  static decode(reader: Reader, length: i32): ResourceRequirements {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ResourceRequirements();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          let limitsKey: string = "";
          let limitsValue: Quantity | null = null;
          let limitsHasKey: bool = false;
          let limitsHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                limitsKey = reader.string();
                limitsHasKey = true;
                break;

              case 2:
                limitsValue = Quantity.decode(reader, reader.uint32());
                limitsHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.limits === null) {
              message.limits = new Map<string, Quantity>();
            }
            const limits = message.limits;
            if (
              limits !== null &&
              limitsHasKey &&
              limitsHasValue &&
              limitsValue !== null
            ) {
              limits.set(limitsKey, limitsValue);
            }
          }
          break;

        case 2:
          let requestsKey: string = "";
          let requestsValue: Quantity | null = null;
          let requestsHasKey: bool = false;
          let requestsHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                requestsKey = reader.string();
                requestsHasKey = true;
                break;

              case 2:
                requestsValue = Quantity.decode(reader, reader.uint32());
                requestsHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.requests === null) {
              message.requests = new Map<string, Quantity>();
            }
            const requests = message.requests;
            if (
              requests !== null &&
              requestsHasKey &&
              requestsHasValue &&
              requestsValue !== null
            ) {
              requests.set(requestsKey, requestsValue);
            }
          }
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  limits: Map<string, Quantity>;
  requests: Map<string, Quantity>;

  constructor(
    limits: Map<string, Quantity> = new Map(),
    requests: Map<string, Quantity> = new Map()
  ) {
    this.limits = limits;
    this.requests = requests;
  }
}
