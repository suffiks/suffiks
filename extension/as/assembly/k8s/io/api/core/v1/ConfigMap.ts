// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { ObjectMeta } from "../../../apimachinery/pkg/apis/meta/v1/ObjectMeta";

export class ConfigMap {
  static encode(message: ConfigMap, writer: Writer): void {
    const metadata = message.metadata;
    if (metadata !== null) {
      writer.uint32(10);
      writer.fork();
      ObjectMeta.encode(metadata, writer);
      writer.ldelim();
    }

    writer.uint32(32);
    writer.bool(message.immutable);

    const data = message.data;
    if (data !== null) {
      const dataKeys = data.keys();
      for (let i: i32 = 0; i < dataKeys.length; ++i) {
        const dataKey = dataKeys[i];
        writer.uint32(18);
        writer.fork();
        writer.uint32(10);
        writer.string(dataKey);
        writer.uint32(18);
        writer.string(data.get(dataKey));
        writer.ldelim();
      }
    }

    const binaryData = message.binaryData;
    if (binaryData !== null) {
      const binaryDataKeys = binaryData.keys();
      for (let i: i32 = 0; i < binaryDataKeys.length; ++i) {
        const binaryDataKey = binaryDataKeys[i];
        writer.uint32(26);
        writer.fork();
        writer.uint32(10);
        writer.string(binaryDataKey);
        writer.uint32(18);
        writer.bytes(binaryData.get(binaryDataKey));
        writer.ldelim();
      }
    }
  }

  static decode(reader: Reader, length: i32): ConfigMap {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ConfigMap();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.metadata = ObjectMeta.decode(reader, reader.uint32());
          break;

        case 4:
          message.immutable = reader.bool();
          break;

        case 2:
          let dataKey: string = "";
          let dataValue: string = "";
          let dataHasKey: bool = false;
          let dataHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                dataKey = reader.string();
                dataHasKey = true;
                break;

              case 2:
                dataValue = reader.string();
                dataHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.data === null) {
              message.data = new Map<string, string>();
            }
            const data = message.data;
            if (data !== null && dataHasKey && dataHasValue) {
              data.set(dataKey, dataValue);
            }
          }
          break;

        case 3:
          let binaryDataKey: string = "";
          let binaryDataValue: Uint8Array = new Uint8Array(0);
          let binaryDataHasKey: bool = false;
          let binaryDataHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                binaryDataKey = reader.string();
                binaryDataHasKey = true;
                break;

              case 2:
                binaryDataValue = reader.bytes();
                binaryDataHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.binaryData === null) {
              message.binaryData = new Map<string, Uint8Array>();
            }
            const binaryData = message.binaryData;
            if (binaryData !== null && binaryDataHasKey && binaryDataHasValue) {
              binaryData.set(binaryDataKey, binaryDataValue);
            }
          }
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  metadata: ObjectMeta | null;
  immutable: bool;
  data: Map<string, string>;
  binaryData: Map<string, Uint8Array>;

  constructor(
    metadata: ObjectMeta | null = null,
    immutable: bool = false,
    data: Map<string, string> = new Map(),
    binaryData: Map<string, Uint8Array> = new Map()
  ) {
    this.metadata = metadata;
    this.immutable = immutable;
    this.data = data;
    this.binaryData = binaryData;
  }
}
