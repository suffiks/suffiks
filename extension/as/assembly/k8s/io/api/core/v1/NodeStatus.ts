// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { Quantity } from "../../../apimachinery/pkg/api/resource/Quantity";
import { NodeCondition } from "./NodeCondition";
import { NodeAddress } from "./NodeAddress";
import { NodeDaemonEndpoints } from "./NodeDaemonEndpoints";
import { NodeSystemInfo } from "./NodeSystemInfo";
import { ContainerImage } from "./ContainerImage";
import { AttachedVolume } from "./AttachedVolume";
import { NodeConfigStatus } from "./NodeConfigStatus";

export class NodeStatus {
  static encode(message: NodeStatus, writer: Writer): void {
    const capacity = message.capacity;
    if (capacity !== null) {
      const capacityKeys = capacity.keys();
      for (let i: i32 = 0; i < capacityKeys.length; ++i) {
        const capacityKey = capacityKeys[i];
        writer.uint32(10);
        writer.fork();
        writer.uint32(10);
        writer.string(capacityKey);
        writer.uint32(18);
        writer.fork();
        Quantity.encode(capacity.get(capacityKey), writer);
        writer.ldelim();
        writer.ldelim();
      }
    }

    const allocatable = message.allocatable;
    if (allocatable !== null) {
      const allocatableKeys = allocatable.keys();
      for (let i: i32 = 0; i < allocatableKeys.length; ++i) {
        const allocatableKey = allocatableKeys[i];
        writer.uint32(18);
        writer.fork();
        writer.uint32(10);
        writer.string(allocatableKey);
        writer.uint32(18);
        writer.fork();
        Quantity.encode(allocatable.get(allocatableKey), writer);
        writer.ldelim();
        writer.ldelim();
      }
    }

    writer.uint32(26);
    writer.string(message.phase);

    const conditions = message.conditions;
    for (let i: i32 = 0; i < conditions.length; ++i) {
      writer.uint32(34);
      writer.fork();
      NodeCondition.encode(conditions[i], writer);
      writer.ldelim();
    }

    const addresses = message.addresses;
    for (let i: i32 = 0; i < addresses.length; ++i) {
      writer.uint32(42);
      writer.fork();
      NodeAddress.encode(addresses[i], writer);
      writer.ldelim();
    }

    const daemonEndpoints = message.daemonEndpoints;
    if (daemonEndpoints !== null) {
      writer.uint32(50);
      writer.fork();
      NodeDaemonEndpoints.encode(daemonEndpoints, writer);
      writer.ldelim();
    }

    const nodeInfo = message.nodeInfo;
    if (nodeInfo !== null) {
      writer.uint32(58);
      writer.fork();
      NodeSystemInfo.encode(nodeInfo, writer);
      writer.ldelim();
    }

    const images = message.images;
    for (let i: i32 = 0; i < images.length; ++i) {
      writer.uint32(66);
      writer.fork();
      ContainerImage.encode(images[i], writer);
      writer.ldelim();
    }

    const volumesInUse = message.volumesInUse;
    if (volumesInUse.length !== 0) {
      for (let i: i32 = 0; i < volumesInUse.length; ++i) {
        writer.uint32(74);
        writer.string(volumesInUse[i]);
      }
    }

    const volumesAttached = message.volumesAttached;
    for (let i: i32 = 0; i < volumesAttached.length; ++i) {
      writer.uint32(82);
      writer.fork();
      AttachedVolume.encode(volumesAttached[i], writer);
      writer.ldelim();
    }

    const config = message.config;
    if (config !== null) {
      writer.uint32(90);
      writer.fork();
      NodeConfigStatus.encode(config, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): NodeStatus {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new NodeStatus();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          let capacityKey: string = "";
          let capacityValue: Quantity | null = null;
          let capacityHasKey: bool = false;
          let capacityHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                capacityKey = reader.string();
                capacityHasKey = true;
                break;

              case 2:
                capacityValue = Quantity.decode(reader, reader.uint32());
                capacityHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.capacity === null) {
              message.capacity = new Map<string, Quantity>();
            }
            const capacity = message.capacity;
            if (
              capacity !== null &&
              capacityHasKey &&
              capacityHasValue &&
              capacityValue !== null
            ) {
              capacity.set(capacityKey, capacityValue);
            }
          }
          break;

        case 2:
          let allocatableKey: string = "";
          let allocatableValue: Quantity | null = null;
          let allocatableHasKey: bool = false;
          let allocatableHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                allocatableKey = reader.string();
                allocatableHasKey = true;
                break;

              case 2:
                allocatableValue = Quantity.decode(reader, reader.uint32());
                allocatableHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.allocatable === null) {
              message.allocatable = new Map<string, Quantity>();
            }
            const allocatable = message.allocatable;
            if (
              allocatable !== null &&
              allocatableHasKey &&
              allocatableHasValue &&
              allocatableValue !== null
            ) {
              allocatable.set(allocatableKey, allocatableValue);
            }
          }
          break;

        case 3:
          message.phase = reader.string();
          break;

        case 4:
          message.conditions.push(
            NodeCondition.decode(reader, reader.uint32())
          );
          break;

        case 5:
          message.addresses.push(NodeAddress.decode(reader, reader.uint32()));
          break;

        case 6:
          message.daemonEndpoints = NodeDaemonEndpoints.decode(
            reader,
            reader.uint32()
          );
          break;

        case 7:
          message.nodeInfo = NodeSystemInfo.decode(reader, reader.uint32());
          break;

        case 8:
          message.images.push(ContainerImage.decode(reader, reader.uint32()));
          break;

        case 9:
          message.volumesInUse.push(reader.string());
          break;

        case 10:
          message.volumesAttached.push(
            AttachedVolume.decode(reader, reader.uint32())
          );
          break;

        case 11:
          message.config = NodeConfigStatus.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  capacity: Map<string, Quantity>;
  allocatable: Map<string, Quantity>;
  phase: string;
  conditions: Array<NodeCondition>;
  addresses: Array<NodeAddress>;
  daemonEndpoints: NodeDaemonEndpoints | null;
  nodeInfo: NodeSystemInfo | null;
  images: Array<ContainerImage>;
  volumesInUse: Array<string>;
  volumesAttached: Array<AttachedVolume>;
  config: NodeConfigStatus | null;

  constructor(
    capacity: Map<string, Quantity> = new Map(),
    allocatable: Map<string, Quantity> = new Map(),
    phase: string = "",
    conditions: Array<NodeCondition> = [],
    addresses: Array<NodeAddress> = [],
    daemonEndpoints: NodeDaemonEndpoints | null = null,
    nodeInfo: NodeSystemInfo | null = null,
    images: Array<ContainerImage> = [],
    volumesInUse: Array<string> = [],
    volumesAttached: Array<AttachedVolume> = [],
    config: NodeConfigStatus | null = null
  ) {
    this.capacity = capacity;
    this.allocatable = allocatable;
    this.phase = phase;
    this.conditions = conditions;
    this.addresses = addresses;
    this.daemonEndpoints = daemonEndpoints;
    this.nodeInfo = nodeInfo;
    this.images = images;
    this.volumesInUse = volumesInUse;
    this.volumesAttached = volumesAttached;
    this.config = config;
  }
}
