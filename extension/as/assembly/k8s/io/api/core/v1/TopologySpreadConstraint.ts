// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { LabelSelector } from "../../../apimachinery/pkg/apis/meta/v1/LabelSelector";

export class TopologySpreadConstraint {
  static encode(message: TopologySpreadConstraint, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.maxSkew);

    writer.uint32(18);
    writer.string(message.topologyKey);

    writer.uint32(26);
    writer.string(message.whenUnsatisfiable);

    const labelSelector = message.labelSelector;
    if (labelSelector !== null) {
      writer.uint32(34);
      writer.fork();
      LabelSelector.encode(labelSelector, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): TopologySpreadConstraint {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new TopologySpreadConstraint();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.maxSkew = reader.int32();
          break;

        case 2:
          message.topologyKey = reader.string();
          break;

        case 3:
          message.whenUnsatisfiable = reader.string();
          break;

        case 4:
          message.labelSelector = LabelSelector.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  maxSkew: i32;
  topologyKey: string;
  whenUnsatisfiable: string;
  labelSelector: LabelSelector | null;

  constructor(
    maxSkew: i32 = 0,
    topologyKey: string = "",
    whenUnsatisfiable: string = "",
    labelSelector: LabelSelector | null = null
  ) {
    this.maxSkew = maxSkew;
    this.topologyKey = topologyKey;
    this.whenUnsatisfiable = whenUnsatisfiable;
    this.labelSelector = labelSelector;
  }
}
