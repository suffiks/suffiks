// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { Time } from "./Time";

export class Condition {
  static encode(message: Condition, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.type);

    writer.uint32(18);
    writer.string(message.status);

    writer.uint32(24);
    writer.int64(message.observedGeneration);

    const lastTransitionTime = message.lastTransitionTime;
    if (lastTransitionTime !== null) {
      writer.uint32(34);
      writer.fork();
      Time.encode(lastTransitionTime, writer);
      writer.ldelim();
    }

    writer.uint32(42);
    writer.string(message.reason);

    writer.uint32(50);
    writer.string(message.message);
  }

  static decode(reader: Reader, length: i32): Condition {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Condition();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.type = reader.string();
          break;

        case 2:
          message.status = reader.string();
          break;

        case 3:
          message.observedGeneration = reader.int64();
          break;

        case 4:
          message.lastTransitionTime = Time.decode(reader, reader.uint32());
          break;

        case 5:
          message.reason = reader.string();
          break;

        case 6:
          message.message = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  type: string;
  status: string;
  observedGeneration: i64;
  lastTransitionTime: Time | null;
  reason: string;
  message: string;

  constructor(
    type: string = "",
    status: string = "",
    observedGeneration: i64 = 0,
    lastTransitionTime: Time | null = null,
    reason: string = "",
    message: string = ""
  ) {
    this.type = type;
    this.status = status;
    this.observedGeneration = observedGeneration;
    this.lastTransitionTime = lastTransitionTime;
    this.reason = reason;
    this.message = message;
  }
}
