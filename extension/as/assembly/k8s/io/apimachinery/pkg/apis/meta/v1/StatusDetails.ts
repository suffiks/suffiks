// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { StatusCause } from "./StatusCause";

export class StatusDetails {
  static encode(message: StatusDetails, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.name);

    writer.uint32(18);
    writer.string(message.group);

    writer.uint32(26);
    writer.string(message.kind);

    writer.uint32(50);
    writer.string(message.uid);

    const causes = message.causes;
    for (let i: i32 = 0; i < causes.length; ++i) {
      writer.uint32(34);
      writer.fork();
      StatusCause.encode(causes[i], writer);
      writer.ldelim();
    }

    writer.uint32(40);
    writer.int32(message.retryAfterSeconds);
  }

  static decode(reader: Reader, length: i32): StatusDetails {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new StatusDetails();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;

        case 2:
          message.group = reader.string();
          break;

        case 3:
          message.kind = reader.string();
          break;

        case 6:
          message.uid = reader.string();
          break;

        case 4:
          message.causes.push(StatusCause.decode(reader, reader.uint32()));
          break;

        case 5:
          message.retryAfterSeconds = reader.int32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  name: string;
  group: string;
  kind: string;
  uid: string;
  causes: Array<StatusCause>;
  retryAfterSeconds: i32;

  constructor(
    name: string = "",
    group: string = "",
    kind: string = "",
    uid: string = "",
    causes: Array<StatusCause> = [],
    retryAfterSeconds: i32 = 0
  ) {
    this.name = name;
    this.group = group;
    this.kind = kind;
    this.uid = uid;
    this.causes = causes;
    this.retryAfterSeconds = retryAfterSeconds;
  }
}
