// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { ObjectMeta } from "../../../apimachinery/pkg/apis/meta/v1/ObjectMeta";
import { ObjectReference } from "./ObjectReference";
import { LocalObjectReference } from "./LocalObjectReference";

export class ServiceAccount {
  static encode(message: ServiceAccount, writer: Writer): void {
    const metadata = message.metadata;
    if (metadata !== null) {
      writer.uint32(10);
      writer.fork();
      ObjectMeta.encode(metadata, writer);
      writer.ldelim();
    }

    const secrets = message.secrets;
    for (let i: i32 = 0; i < secrets.length; ++i) {
      writer.uint32(18);
      writer.fork();
      ObjectReference.encode(secrets[i], writer);
      writer.ldelim();
    }

    const imagePullSecrets = message.imagePullSecrets;
    for (let i: i32 = 0; i < imagePullSecrets.length; ++i) {
      writer.uint32(26);
      writer.fork();
      LocalObjectReference.encode(imagePullSecrets[i], writer);
      writer.ldelim();
    }

    writer.uint32(32);
    writer.bool(message.automountServiceAccountToken);
  }

  static decode(reader: Reader, length: i32): ServiceAccount {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ServiceAccount();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.metadata = ObjectMeta.decode(reader, reader.uint32());
          break;

        case 2:
          message.secrets.push(ObjectReference.decode(reader, reader.uint32()));
          break;

        case 3:
          message.imagePullSecrets.push(
            LocalObjectReference.decode(reader, reader.uint32())
          );
          break;

        case 4:
          message.automountServiceAccountToken = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  metadata: ObjectMeta | null;
  secrets: Array<ObjectReference>;
  imagePullSecrets: Array<LocalObjectReference>;
  automountServiceAccountToken: bool;

  constructor(
    metadata: ObjectMeta | null = null,
    secrets: Array<ObjectReference> = [],
    imagePullSecrets: Array<LocalObjectReference> = [],
    automountServiceAccountToken: bool = false
  ) {
    this.metadata = metadata;
    this.secrets = secrets;
    this.imagePullSecrets = imagePullSecrets;
    this.automountServiceAccountToken = automountServiceAccountToken;
  }
}
