// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { TypeMeta } from "./TypeMeta";

export class Unknown {
  static encode(message: Unknown, writer: Writer): void {
    const typeMeta = message.typeMeta;
    if (typeMeta !== null) {
      writer.uint32(10);
      writer.fork();
      TypeMeta.encode(typeMeta, writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.bytes(message.raw);

    writer.uint32(26);
    writer.string(message.contentEncoding);

    writer.uint32(34);
    writer.string(message.contentType);
  }

  static decode(reader: Reader, length: i32): Unknown {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Unknown();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.typeMeta = TypeMeta.decode(reader, reader.uint32());
          break;

        case 2:
          message.raw = reader.bytes();
          break;

        case 3:
          message.contentEncoding = reader.string();
          break;

        case 4:
          message.contentType = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  typeMeta: TypeMeta | null;
  raw: Uint8Array;
  contentEncoding: string;
  contentType: string;

  constructor(
    typeMeta: TypeMeta | null = null,
    raw: Uint8Array = new Uint8Array(0),
    contentEncoding: string = "",
    contentType: string = ""
  ) {
    this.typeMeta = typeMeta;
    this.raw = raw;
    this.contentEncoding = contentEncoding;
    this.contentType = contentType;
  }
}
