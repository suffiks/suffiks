// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";

export class ListOptions {
  static encode(message: ListOptions, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.labelSelector);

    writer.uint32(18);
    writer.string(message.fieldSelector);

    writer.uint32(24);
    writer.bool(message.watch);

    writer.uint32(72);
    writer.bool(message.allowWatchBookmarks);

    writer.uint32(34);
    writer.string(message.resourceVersion);

    writer.uint32(82);
    writer.string(message.resourceVersionMatch);

    writer.uint32(40);
    writer.int64(message.timeoutSeconds);

    writer.uint32(56);
    writer.int64(message.limit);

    writer.uint32(66);
    writer.string(message.continue);
  }

  static decode(reader: Reader, length: i32): ListOptions {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ListOptions();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.labelSelector = reader.string();
          break;

        case 2:
          message.fieldSelector = reader.string();
          break;

        case 3:
          message.watch = reader.bool();
          break;

        case 9:
          message.allowWatchBookmarks = reader.bool();
          break;

        case 4:
          message.resourceVersion = reader.string();
          break;

        case 10:
          message.resourceVersionMatch = reader.string();
          break;

        case 5:
          message.timeoutSeconds = reader.int64();
          break;

        case 7:
          message.limit = reader.int64();
          break;

        case 8:
          message.continue = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  labelSelector: string;
  fieldSelector: string;
  watch: bool;
  allowWatchBookmarks: bool;
  resourceVersion: string;
  resourceVersionMatch: string;
  timeoutSeconds: i64;
  limit: i64;
  continue: string;

  constructor(
    labelSelector: string = "",
    fieldSelector: string = "",
    watch: bool = false,
    allowWatchBookmarks: bool = false,
    resourceVersion: string = "",
    resourceVersionMatch: string = "",
    timeoutSeconds: i64 = 0,
    limit: i64 = 0,
    continue_: string = ""
  ) {
    this.labelSelector = labelSelector;
    this.fieldSelector = fieldSelector;
    this.watch = watch;
    this.allowWatchBookmarks = allowWatchBookmarks;
    this.resourceVersion = resourceVersion;
    this.resourceVersionMatch = resourceVersionMatch;
    this.timeoutSeconds = timeoutSeconds;
    this.limit = limit;
    this.continue = continue_;
  }
}
