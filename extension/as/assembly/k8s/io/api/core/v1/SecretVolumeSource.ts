// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { KeyToPath } from "./KeyToPath";

export class SecretVolumeSource {
  static encode(message: SecretVolumeSource, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.secretName);

    const items = message.items;
    for (let i: i32 = 0; i < items.length; ++i) {
      writer.uint32(18);
      writer.fork();
      KeyToPath.encode(items[i], writer);
      writer.ldelim();
    }

    writer.uint32(24);
    writer.int32(message.defaultMode);

    writer.uint32(32);
    writer.bool(message.optional);
  }

  static decode(reader: Reader, length: i32): SecretVolumeSource {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SecretVolumeSource();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.secretName = reader.string();
          break;

        case 2:
          message.items.push(KeyToPath.decode(reader, reader.uint32()));
          break;

        case 3:
          message.defaultMode = reader.int32();
          break;

        case 4:
          message.optional = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  secretName: string;
  items: Array<KeyToPath>;
  defaultMode: i32;
  optional: bool;

  constructor(
    secretName: string = "",
    items: Array<KeyToPath> = [],
    defaultMode: i32 = 0,
    optional: bool = false
  ) {
    this.secretName = secretName;
    this.items = items;
    this.defaultMode = defaultMode;
    this.optional = optional;
  }
}
