// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { ObjectMeta } from "../../../apimachinery/pkg/apis/meta/v1/ObjectMeta";
import { ObjectReference } from "./ObjectReference";
import { EventSource } from "./EventSource";
import { Time } from "../../../apimachinery/pkg/apis/meta/v1/Time";
import { MicroTime } from "../../../apimachinery/pkg/apis/meta/v1/MicroTime";
import { EventSeries } from "./EventSeries";

export class Event {
  static encode(message: Event, writer: Writer): void {
    const metadata = message.metadata;
    if (metadata !== null) {
      writer.uint32(10);
      writer.fork();
      ObjectMeta.encode(metadata, writer);
      writer.ldelim();
    }

    const involvedObject = message.involvedObject;
    if (involvedObject !== null) {
      writer.uint32(18);
      writer.fork();
      ObjectReference.encode(involvedObject, writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.reason);

    writer.uint32(34);
    writer.string(message.message);

    const source = message.source;
    if (source !== null) {
      writer.uint32(42);
      writer.fork();
      EventSource.encode(source, writer);
      writer.ldelim();
    }

    const firstTimestamp = message.firstTimestamp;
    if (firstTimestamp !== null) {
      writer.uint32(50);
      writer.fork();
      Time.encode(firstTimestamp, writer);
      writer.ldelim();
    }

    const lastTimestamp = message.lastTimestamp;
    if (lastTimestamp !== null) {
      writer.uint32(58);
      writer.fork();
      Time.encode(lastTimestamp, writer);
      writer.ldelim();
    }

    writer.uint32(64);
    writer.int32(message.count);

    writer.uint32(74);
    writer.string(message.type);

    const eventTime = message.eventTime;
    if (eventTime !== null) {
      writer.uint32(82);
      writer.fork();
      MicroTime.encode(eventTime, writer);
      writer.ldelim();
    }

    const series = message.series;
    if (series !== null) {
      writer.uint32(90);
      writer.fork();
      EventSeries.encode(series, writer);
      writer.ldelim();
    }

    writer.uint32(98);
    writer.string(message.action);

    const related = message.related;
    if (related !== null) {
      writer.uint32(106);
      writer.fork();
      ObjectReference.encode(related, writer);
      writer.ldelim();
    }

    writer.uint32(114);
    writer.string(message.reportingComponent);

    writer.uint32(122);
    writer.string(message.reportingInstance);
  }

  static decode(reader: Reader, length: i32): Event {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Event();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.metadata = ObjectMeta.decode(reader, reader.uint32());
          break;

        case 2:
          message.involvedObject = ObjectReference.decode(
            reader,
            reader.uint32()
          );
          break;

        case 3:
          message.reason = reader.string();
          break;

        case 4:
          message.message = reader.string();
          break;

        case 5:
          message.source = EventSource.decode(reader, reader.uint32());
          break;

        case 6:
          message.firstTimestamp = Time.decode(reader, reader.uint32());
          break;

        case 7:
          message.lastTimestamp = Time.decode(reader, reader.uint32());
          break;

        case 8:
          message.count = reader.int32();
          break;

        case 9:
          message.type = reader.string();
          break;

        case 10:
          message.eventTime = MicroTime.decode(reader, reader.uint32());
          break;

        case 11:
          message.series = EventSeries.decode(reader, reader.uint32());
          break;

        case 12:
          message.action = reader.string();
          break;

        case 13:
          message.related = ObjectReference.decode(reader, reader.uint32());
          break;

        case 14:
          message.reportingComponent = reader.string();
          break;

        case 15:
          message.reportingInstance = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  metadata: ObjectMeta | null;
  involvedObject: ObjectReference | null;
  reason: string;
  message: string;
  source: EventSource | null;
  firstTimestamp: Time | null;
  lastTimestamp: Time | null;
  count: i32;
  type: string;
  eventTime: MicroTime | null;
  series: EventSeries | null;
  action: string;
  related: ObjectReference | null;
  reportingComponent: string;
  reportingInstance: string;

  constructor(
    metadata: ObjectMeta | null = null,
    involvedObject: ObjectReference | null = null,
    reason: string = "",
    message: string = "",
    source: EventSource | null = null,
    firstTimestamp: Time | null = null,
    lastTimestamp: Time | null = null,
    count: i32 = 0,
    type: string = "",
    eventTime: MicroTime | null = null,
    series: EventSeries | null = null,
    action: string = "",
    related: ObjectReference | null = null,
    reportingComponent: string = "",
    reportingInstance: string = ""
  ) {
    this.metadata = metadata;
    this.involvedObject = involvedObject;
    this.reason = reason;
    this.message = message;
    this.source = source;
    this.firstTimestamp = firstTimestamp;
    this.lastTimestamp = lastTimestamp;
    this.count = count;
    this.type = type;
    this.eventTime = eventTime;
    this.series = series;
    this.action = action;
    this.related = related;
    this.reportingComponent = reportingComponent;
    this.reportingInstance = reportingInstance;
  }
}
