// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { Quantity } from "../../../apimachinery/pkg/api/resource/Quantity";

export class ResourceQuotaStatus {
  static encode(message: ResourceQuotaStatus, writer: Writer): void {
    const hard = message.hard;
    if (hard !== null) {
      const hardKeys = hard.keys();
      for (let i: i32 = 0; i < hardKeys.length; ++i) {
        const hardKey = hardKeys[i];
        writer.uint32(10);
        writer.fork();
        writer.uint32(10);
        writer.string(hardKey);
        writer.uint32(18);
        writer.fork();
        Quantity.encode(hard.get(hardKey), writer);
        writer.ldelim();
        writer.ldelim();
      }
    }

    const used = message.used;
    if (used !== null) {
      const usedKeys = used.keys();
      for (let i: i32 = 0; i < usedKeys.length; ++i) {
        const usedKey = usedKeys[i];
        writer.uint32(18);
        writer.fork();
        writer.uint32(10);
        writer.string(usedKey);
        writer.uint32(18);
        writer.fork();
        Quantity.encode(used.get(usedKey), writer);
        writer.ldelim();
        writer.ldelim();
      }
    }
  }

  static decode(reader: Reader, length: i32): ResourceQuotaStatus {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ResourceQuotaStatus();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          let hardKey: string = "";
          let hardValue: Quantity | null = null;
          let hardHasKey: bool = false;
          let hardHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                hardKey = reader.string();
                hardHasKey = true;
                break;

              case 2:
                hardValue = Quantity.decode(reader, reader.uint32());
                hardHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.hard === null) {
              message.hard = new Map<string, Quantity>();
            }
            const hard = message.hard;
            if (
              hard !== null &&
              hardHasKey &&
              hardHasValue &&
              hardValue !== null
            ) {
              hard.set(hardKey, hardValue);
            }
          }
          break;

        case 2:
          let usedKey: string = "";
          let usedValue: Quantity | null = null;
          let usedHasKey: bool = false;
          let usedHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                usedKey = reader.string();
                usedHasKey = true;
                break;

              case 2:
                usedValue = Quantity.decode(reader, reader.uint32());
                usedHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.used === null) {
              message.used = new Map<string, Quantity>();
            }
            const used = message.used;
            if (
              used !== null &&
              usedHasKey &&
              usedHasValue &&
              usedValue !== null
            ) {
              used.set(usedKey, usedValue);
            }
          }
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  hard: Map<string, Quantity>;
  used: Map<string, Quantity>;

  constructor(
    hard: Map<string, Quantity> = new Map(),
    used: Map<string, Quantity> = new Map()
  ) {
    this.hard = hard;
    this.used = used;
  }
}
