// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { ReplicationControllerCondition } from "./ReplicationControllerCondition";

export class ReplicationControllerStatus {
  static encode(message: ReplicationControllerStatus, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.replicas);

    writer.uint32(16);
    writer.int32(message.fullyLabeledReplicas);

    writer.uint32(32);
    writer.int32(message.readyReplicas);

    writer.uint32(40);
    writer.int32(message.availableReplicas);

    writer.uint32(24);
    writer.int64(message.observedGeneration);

    const conditions = message.conditions;
    for (let i: i32 = 0; i < conditions.length; ++i) {
      writer.uint32(50);
      writer.fork();
      ReplicationControllerCondition.encode(conditions[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ReplicationControllerStatus {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ReplicationControllerStatus();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.replicas = reader.int32();
          break;

        case 2:
          message.fullyLabeledReplicas = reader.int32();
          break;

        case 4:
          message.readyReplicas = reader.int32();
          break;

        case 5:
          message.availableReplicas = reader.int32();
          break;

        case 3:
          message.observedGeneration = reader.int64();
          break;

        case 6:
          message.conditions.push(
            ReplicationControllerCondition.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  replicas: i32;
  fullyLabeledReplicas: i32;
  readyReplicas: i32;
  availableReplicas: i32;
  observedGeneration: i64;
  conditions: Array<ReplicationControllerCondition>;

  constructor(
    replicas: i32 = 0,
    fullyLabeledReplicas: i32 = 0,
    readyReplicas: i32 = 0,
    availableReplicas: i32 = 0,
    observedGeneration: i64 = 0,
    conditions: Array<ReplicationControllerCondition> = []
  ) {
    this.replicas = replicas;
    this.fullyLabeledReplicas = fullyLabeledReplicas;
    this.readyReplicas = readyReplicas;
    this.availableReplicas = availableReplicas;
    this.observedGeneration = observedGeneration;
    this.conditions = conditions;
  }
}
