// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { PodDNSConfigOption } from "./PodDNSConfigOption";

export class PodDNSConfig {
  static encode(message: PodDNSConfig, writer: Writer): void {
    const nameservers = message.nameservers;
    if (nameservers.length !== 0) {
      for (let i: i32 = 0; i < nameservers.length; ++i) {
        writer.uint32(10);
        writer.string(nameservers[i]);
      }
    }

    const searches = message.searches;
    if (searches.length !== 0) {
      for (let i: i32 = 0; i < searches.length; ++i) {
        writer.uint32(18);
        writer.string(searches[i]);
      }
    }

    const options = message.options;
    for (let i: i32 = 0; i < options.length; ++i) {
      writer.uint32(26);
      writer.fork();
      PodDNSConfigOption.encode(options[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): PodDNSConfig {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new PodDNSConfig();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.nameservers.push(reader.string());
          break;

        case 2:
          message.searches.push(reader.string());
          break;

        case 3:
          message.options.push(
            PodDNSConfigOption.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  nameservers: Array<string>;
  searches: Array<string>;
  options: Array<PodDNSConfigOption>;

  constructor(
    nameservers: Array<string> = [],
    searches: Array<string> = [],
    options: Array<PodDNSConfigOption> = []
  ) {
    this.nameservers = nameservers;
    this.searches = searches;
    this.options = options;
  }
}
