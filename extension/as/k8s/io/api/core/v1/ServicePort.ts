// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { IntOrString } from "../../../apimachinery/pkg/util/intstr/IntOrString";

export class ServicePort {
  static encode(message: ServicePort, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.name);

    writer.uint32(18);
    writer.string(message.protocol);

    writer.uint32(50);
    writer.string(message.appProtocol);

    writer.uint32(24);
    writer.int32(message.port);

    const targetPort = message.targetPort;
    if (targetPort !== null) {
      writer.uint32(34);
      writer.fork();
      IntOrString.encode(targetPort, writer);
      writer.ldelim();
    }

    writer.uint32(40);
    writer.int32(message.nodePort);
  }

  static decode(reader: Reader, length: i32): ServicePort {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ServicePort();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;

        case 2:
          message.protocol = reader.string();
          break;

        case 6:
          message.appProtocol = reader.string();
          break;

        case 3:
          message.port = reader.int32();
          break;

        case 4:
          message.targetPort = IntOrString.decode(reader, reader.uint32());
          break;

        case 5:
          message.nodePort = reader.int32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  name: string;
  protocol: string;
  appProtocol: string;
  port: i32;
  targetPort: IntOrString | null;
  nodePort: i32;

  constructor(
    name: string = "",
    protocol: string = "",
    appProtocol: string = "",
    port: i32 = 0,
    targetPort: IntOrString | null = null,
    nodePort: i32 = 0
  ) {
    this.name = name;
    this.protocol = protocol;
    this.appProtocol = appProtocol;
    this.port = port;
    this.targetPort = targetPort;
    this.nodePort = nodePort;
  }
}
