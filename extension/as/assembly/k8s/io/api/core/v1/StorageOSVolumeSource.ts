// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { LocalObjectReference } from "./LocalObjectReference";

export class StorageOSVolumeSource {
  static encode(message: StorageOSVolumeSource, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.volumeName);

    writer.uint32(18);
    writer.string(message.volumeNamespace);

    writer.uint32(26);
    writer.string(message.fsType);

    writer.uint32(32);
    writer.bool(message.readOnly);

    const secretRef = message.secretRef;
    if (secretRef !== null) {
      writer.uint32(42);
      writer.fork();
      LocalObjectReference.encode(secretRef, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): StorageOSVolumeSource {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new StorageOSVolumeSource();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.volumeName = reader.string();
          break;

        case 2:
          message.volumeNamespace = reader.string();
          break;

        case 3:
          message.fsType = reader.string();
          break;

        case 4:
          message.readOnly = reader.bool();
          break;

        case 5:
          message.secretRef = LocalObjectReference.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  volumeName: string;
  volumeNamespace: string;
  fsType: string;
  readOnly: bool;
  secretRef: LocalObjectReference | null;

  constructor(
    volumeName: string = "",
    volumeNamespace: string = "",
    fsType: string = "",
    readOnly: bool = false,
    secretRef: LocalObjectReference | null = null
  ) {
    this.volumeName = volumeName;
    this.volumeNamespace = volumeNamespace;
    this.fsType = fsType;
    this.readOnly = readOnly;
    this.secretRef = secretRef;
  }
}
