// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { Time } from "../../../apimachinery/pkg/apis/meta/v1/Time";

export class ContainerStateTerminated {
  static encode(message: ContainerStateTerminated, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.exitCode);

    writer.uint32(16);
    writer.int32(message.signal);

    writer.uint32(26);
    writer.string(message.reason);

    writer.uint32(34);
    writer.string(message.message);

    const startedAt = message.startedAt;
    if (startedAt !== null) {
      writer.uint32(42);
      writer.fork();
      Time.encode(startedAt, writer);
      writer.ldelim();
    }

    const finishedAt = message.finishedAt;
    if (finishedAt !== null) {
      writer.uint32(50);
      writer.fork();
      Time.encode(finishedAt, writer);
      writer.ldelim();
    }

    writer.uint32(58);
    writer.string(message.containerID);
  }

  static decode(reader: Reader, length: i32): ContainerStateTerminated {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ContainerStateTerminated();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.exitCode = reader.int32();
          break;

        case 2:
          message.signal = reader.int32();
          break;

        case 3:
          message.reason = reader.string();
          break;

        case 4:
          message.message = reader.string();
          break;

        case 5:
          message.startedAt = Time.decode(reader, reader.uint32());
          break;

        case 6:
          message.finishedAt = Time.decode(reader, reader.uint32());
          break;

        case 7:
          message.containerID = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  exitCode: i32;
  signal: i32;
  reason: string;
  message: string;
  startedAt: Time | null;
  finishedAt: Time | null;
  containerID: string;

  constructor(
    exitCode: i32 = 0,
    signal: i32 = 0,
    reason: string = "",
    message: string = "",
    startedAt: Time | null = null,
    finishedAt: Time | null = null,
    containerID: string = ""
  ) {
    this.exitCode = exitCode;
    this.signal = signal;
    this.reason = reason;
    this.message = message;
    this.startedAt = startedAt;
    this.finishedAt = finishedAt;
    this.containerID = containerID;
  }
}
