// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";

export class OwnerReference {
  static encode(message: OwnerReference, writer: Writer): void {
    writer.uint32(42);
    writer.string(message.apiVersion);

    writer.uint32(10);
    writer.string(message.kind);

    writer.uint32(26);
    writer.string(message.name);

    writer.uint32(34);
    writer.string(message.uid);

    writer.uint32(48);
    writer.bool(message.controller);

    writer.uint32(56);
    writer.bool(message.blockOwnerDeletion);
  }

  static decode(reader: Reader, length: i32): OwnerReference {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new OwnerReference();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          message.apiVersion = reader.string();
          break;

        case 1:
          message.kind = reader.string();
          break;

        case 3:
          message.name = reader.string();
          break;

        case 4:
          message.uid = reader.string();
          break;

        case 6:
          message.controller = reader.bool();
          break;

        case 7:
          message.blockOwnerDeletion = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  apiVersion: string;
  kind: string;
  name: string;
  uid: string;
  controller: bool;
  blockOwnerDeletion: bool;

  constructor(
    apiVersion: string = "",
    kind: string = "",
    name: string = "",
    uid: string = "",
    controller: bool = false,
    blockOwnerDeletion: bool = false
  ) {
    this.apiVersion = apiVersion;
    this.kind = kind;
    this.name = name;
    this.uid = uid;
    this.controller = controller;
    this.blockOwnerDeletion = blockOwnerDeletion;
  }
}
