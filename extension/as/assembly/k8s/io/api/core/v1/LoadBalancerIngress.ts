// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.20.1

import { Writer, Reader } from "as-proto/assembly";
import { PortStatus } from "./PortStatus";

export class LoadBalancerIngress {
  static encode(message: LoadBalancerIngress, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.ip);

    writer.uint32(18);
    writer.string(message.hostname);

    const ports = message.ports;
    for (let i: i32 = 0; i < ports.length; ++i) {
      writer.uint32(34);
      writer.fork();
      PortStatus.encode(ports[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): LoadBalancerIngress {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new LoadBalancerIngress();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.ip = reader.string();
          break;

        case 2:
          message.hostname = reader.string();
          break;

        case 4:
          message.ports.push(PortStatus.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  ip: string;
  hostname: string;
  ports: Array<PortStatus>;

  constructor(
    ip: string = "",
    hostname: string = "",
    ports: Array<PortStatus> = []
  ) {
    this.ip = ip;
    this.hostname = hostname;
    this.ports = ports;
  }
}
